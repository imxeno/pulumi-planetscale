// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetPassword
    {
        /// <summary>
        /// A PlanetScale database password.
        /// </summary>
        public static Task<GetPasswordResult> InvokeAsync(GetPasswordArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPasswordResult>("planetscale:index/getPassword:getPassword", args ?? new GetPasswordArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale database password.
        /// </summary>
        public static Output<GetPasswordResult> Invoke(GetPasswordInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPasswordResult>("planetscale:index/getPassword:getPassword", args ?? new GetPasswordInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale database password.
        /// </summary>
        public static Output<GetPasswordResult> Invoke(GetPasswordInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPasswordResult>("planetscale:index/getPassword:getPassword", args ?? new GetPasswordInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPasswordArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The branch this password belongs to..
        /// </summary>
        [Input("branch", required: true)]
        public string Branch { get; set; } = null!;

        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        /// <summary>
        /// The ID for the password.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        /// <summary>
        /// If the password is for a read-only region, the ID of the region.
        /// </summary>
        [Input("readOnlyRegionId")]
        public string? ReadOnlyRegionId { get; set; }

        public GetPasswordArgs()
        {
        }
        public static new GetPasswordArgs Empty => new GetPasswordArgs();
    }

    public sealed class GetPasswordInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The branch this password belongs to..
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The ID for the password.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// If the password is for a read-only region, the ID of the region.
        /// </summary>
        [Input("readOnlyRegionId")]
        public Input<string>? ReadOnlyRegionId { get; set; }

        public GetPasswordInvokeArgs()
        {
        }
        public static new GetPasswordInvokeArgs Empty => new GetPasswordInvokeArgs();
    }


    [OutputType]
    public sealed class GetPasswordResult
    {
        /// <summary>
        /// The host URL for the password.
        /// </summary>
        public readonly string AccessHostUrl;
        /// <summary>
        /// The actor that created this branch.
        /// </summary>
        public readonly Outputs.GetPasswordActorResult Actor;
        /// <summary>
        /// The branch this password belongs to..
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// When the password was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// The branch this password is allowed to access.
        /// </summary>
        public readonly Outputs.GetPasswordDatabaseBranchResult DatabaseBranch;
        /// <summary>
        /// When the password was deleted.
        /// </summary>
        public readonly string DeletedAt;
        /// <summary>
        /// When the password will expire.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The ID for the password.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The display name for the password.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// If the password is for a read-only region, the ID of the region.
        /// </summary>
        public readonly string? ReadOnlyRegionId;
        /// <summary>
        /// The region in which this password can be used.
        /// </summary>
        public readonly Outputs.GetPasswordRegionResult Region;
        /// <summary>
        /// Whether or not the password can be renewed.
        /// </summary>
        public readonly bool Renewable;
        /// <summary>
        /// The role for the password.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        /// </summary>
        public readonly double TtlSeconds;
        /// <summary>
        /// The username for the password.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetPasswordResult(
            string accessHostUrl,

            Outputs.GetPasswordActorResult actor,

            string branch,

            string createdAt,

            string database,

            Outputs.GetPasswordDatabaseBranchResult databaseBranch,

            string deletedAt,

            string expiresAt,

            string id,

            string name,

            string organization,

            string? readOnlyRegionId,

            Outputs.GetPasswordRegionResult region,

            bool renewable,

            string role,

            double ttlSeconds,

            string username)
        {
            AccessHostUrl = accessHostUrl;
            Actor = actor;
            Branch = branch;
            CreatedAt = createdAt;
            Database = database;
            DatabaseBranch = databaseBranch;
            DeletedAt = deletedAt;
            ExpiresAt = expiresAt;
            Id = id;
            Name = name;
            Organization = organization;
            ReadOnlyRegionId = readOnlyRegionId;
            Region = region;
            Renewable = renewable;
            Role = role;
            TtlSeconds = ttlSeconds;
            Username = username;
        }
    }
}
