// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    /// <summary>
    /// A PlanetScale database password.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Planetscale = Pulumi.Planetscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Planetscale.Password("example", new()
    ///     {
    ///         Organization = "example",
    ///         Database = "example_db",
    ///         Branch = "main",
    ///         Name = "a-password-for-antoine",
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["password"] = example,
    ///     };
    /// });
    /// ```
    /// </summary>
    [PlanetscaleResourceType("planetscale:index/password:Password")]
    public partial class Password : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The host URL for the password.
        /// </summary>
        [Output("accessHostUrl")]
        public Output<string> AccessHostUrl { get; private set; } = null!;

        /// <summary>
        /// The actor that created this branch.
        /// </summary>
        [Output("actor")]
        public Output<Outputs.PasswordActor> Actor { get; private set; } = null!;

        /// <summary>
        /// The branch this password belongs to.
        /// </summary>
        [Output("branch")]
        public Output<string> Branch { get; private set; } = null!;

        /// <summary>
        /// When the password was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// The branch this password is allowed to access.
        /// </summary>
        [Output("databaseBranch")]
        public Output<Outputs.PasswordDatabaseBranch> DatabaseBranch { get; private set; } = null!;

        /// <summary>
        /// When the password was deleted.
        /// </summary>
        [Output("deletedAt")]
        public Output<string> DeletedAt { get; private set; } = null!;

        /// <summary>
        /// When the password will expire.
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        /// <summary>
        /// The display name for the password.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The plaintext password, only available if the password was created by this provider.
        /// </summary>
        [Output("plaintext")]
        public Output<string> Plaintext { get; private set; } = null!;

        /// <summary>
        /// The region in which this password can be used.
        /// </summary>
        [Output("region")]
        public Output<Outputs.PasswordRegion> Region { get; private set; } = null!;

        /// <summary>
        /// Whether or not the password can be renewed.
        /// </summary>
        [Output("renewable")]
        public Output<bool> Renewable { get; private set; } = null!;

        /// <summary>
        /// The role for the password.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        /// </summary>
        [Output("ttlSeconds")]
        public Output<double> TtlSeconds { get; private set; } = null!;

        /// <summary>
        /// The username for the password.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Password resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Password(string name, PasswordArgs args, CustomResourceOptions? options = null)
            : base("planetscale:index/password:Password", name, args ?? new PasswordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Password(string name, Input<string> id, PasswordState? state = null, CustomResourceOptions? options = null)
            : base("planetscale:index/password:Password", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "plaintext",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Password resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Password Get(string name, Input<string> id, PasswordState? state = null, CustomResourceOptions? options = null)
        {
            return new Password(name, id, state, options);
        }
    }

    public sealed class PasswordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The branch this password belongs to.
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The display name for the password.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The role for the password.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        /// </summary>
        [Input("ttlSeconds")]
        public Input<double>? TtlSeconds { get; set; }

        public PasswordArgs()
        {
        }
        public static new PasswordArgs Empty => new PasswordArgs();
    }

    public sealed class PasswordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host URL for the password.
        /// </summary>
        [Input("accessHostUrl")]
        public Input<string>? AccessHostUrl { get; set; }

        /// <summary>
        /// The actor that created this branch.
        /// </summary>
        [Input("actor")]
        public Input<Inputs.PasswordActorGetArgs>? Actor { get; set; }

        /// <summary>
        /// The branch this password belongs to.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// When the password was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// The branch this password is allowed to access.
        /// </summary>
        [Input("databaseBranch")]
        public Input<Inputs.PasswordDatabaseBranchGetArgs>? DatabaseBranch { get; set; }

        /// <summary>
        /// When the password was deleted.
        /// </summary>
        [Input("deletedAt")]
        public Input<string>? DeletedAt { get; set; }

        /// <summary>
        /// When the password will expire.
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        /// <summary>
        /// The display name for the password.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        [Input("plaintext")]
        private Input<string>? _plaintext;

        /// <summary>
        /// The plaintext password, only available if the password was created by this provider.
        /// </summary>
        public Input<string>? Plaintext
        {
            get => _plaintext;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _plaintext = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The region in which this password can be used.
        /// </summary>
        [Input("region")]
        public Input<Inputs.PasswordRegionGetArgs>? Region { get; set; }

        /// <summary>
        /// Whether or not the password can be renewed.
        /// </summary>
        [Input("renewable")]
        public Input<bool>? Renewable { get; set; }

        /// <summary>
        /// The role for the password.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        /// </summary>
        [Input("ttlSeconds")]
        public Input<double>? TtlSeconds { get; set; }

        /// <summary>
        /// The username for the password.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public PasswordState()
        {
        }
        public static new PasswordState Empty => new PasswordState();
    }
}
