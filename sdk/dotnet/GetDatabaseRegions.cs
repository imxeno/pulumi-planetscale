// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetDatabaseRegions
    {
        /// <summary>
        /// A list of PlanetScale regions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabaseRegions.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Name = "example_db",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["databaseRegions"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseRegionsResult> InvokeAsync(GetDatabaseRegionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseRegionsResult>("planetscale:index/getDatabaseRegions:getDatabaseRegions", args ?? new GetDatabaseRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// A list of PlanetScale regions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabaseRegions.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Name = "example_db",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["databaseRegions"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseRegionsResult> Invoke(GetDatabaseRegionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseRegionsResult>("planetscale:index/getDatabaseRegions:getDatabaseRegions", args ?? new GetDatabaseRegionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A list of PlanetScale regions.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabaseRegions.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Name = "example_db",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["databaseRegions"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseRegionsResult> Invoke(GetDatabaseRegionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseRegionsResult>("planetscale:index/getDatabaseRegions:getDatabaseRegions", args ?? new GetDatabaseRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseRegionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database for which the regions are available.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The organization for which the regions are available.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        public GetDatabaseRegionsArgs()
        {
        }
        public static new GetDatabaseRegionsArgs Empty => new GetDatabaseRegionsArgs();
    }

    public sealed class GetDatabaseRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database for which the regions are available.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The organization for which the regions are available.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        public GetDatabaseRegionsInvokeArgs()
        {
        }
        public static new GetDatabaseRegionsInvokeArgs Empty => new GetDatabaseRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseRegionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The database for which the regions are available.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization for which the regions are available.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The list of regions available for the database.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseRegionsRegionResult> Regions;

        [OutputConstructor]
        private GetDatabaseRegionsResult(
            string id,

            string name,

            string organization,

            ImmutableArray<Outputs.GetDatabaseRegionsRegionResult> regions)
        {
            Id = id;
            Name = name;
            Organization = organization;
            Regions = regions;
        }
    }
}
