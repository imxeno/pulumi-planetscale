// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale.Outputs
{

    [OutputType]
    public sealed class GetDatabasesDatabaseResult
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        public readonly bool AllowDataBranching;
        /// <summary>
        /// If the database has reached its backup restored branch limit.
        /// </summary>
        public readonly bool AtBackupRestoreBranchesLimit;
        /// <summary>
        /// If the database has reached its development branch limit.
        /// </summary>
        public readonly bool AtDevelopmentBranchLimit;
        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        public readonly bool AutomaticMigrations;
        /// <summary>
        /// The total number of database branches.
        /// </summary>
        public readonly double BranchesCount;
        /// <summary>
        /// The URL to retrieve this database's branches via the API.
        /// </summary>
        public readonly string BranchesUrl;
        /// <summary>
        /// When the database was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        public readonly Outputs.GetDatabasesDatabaseDataImportResult? DataImport;
        /// <summary>
        /// The default branch for the database.
        /// </summary>
        public readonly string DefaultBranch;
        /// <summary>
        /// Number of read only regions in the default branch.
        /// </summary>
        public readonly double DefaultBranchReadOnlyRegionsCount;
        /// <summary>
        /// Number of shards in the default branch.
        /// </summary>
        public readonly double DefaultBranchShardCount;
        /// <summary>
        /// Number of tables in the default branch schema.
        /// </summary>
        public readonly double DefaultBranchTableCount;
        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        public readonly double DevelopmentBranchesCount;
        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        public readonly string HtmlUrl;
        /// <summary>
        /// The ID of the database.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        public readonly bool InsightsRawQueries;
        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        public readonly double IssuesCount;
        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        public readonly string MigrationFramework;
        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        public readonly string MigrationTableName;
        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        public readonly bool MultipleAdminsRequiredForDeletion;
        /// <summary>
        /// The name of this database.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The database plan.
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        public readonly bool ProductionBranchWebConsole;
        /// <summary>
        /// The total number of database production branches.
        /// </summary>
        public readonly double ProductionBranchesCount;
        /// <summary>
        /// If the database is ready to be used.
        /// </summary>
        public readonly bool Ready;
        /// <summary>
        /// The region the database lives in.
        /// </summary>
        public readonly Outputs.GetDatabasesDatabaseRegionResult Region;
        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        public readonly bool RequireApprovalForDeploy;
        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        public readonly bool RestrictBranchRegion;
        /// <summary>
        /// When the default branch schema was last changed.
        /// </summary>
        public readonly string SchemaLastUpdatedAt;
        /// <summary>
        /// If the database is sharded.
        /// </summary>
        public readonly bool Sharded;
        /// <summary>
        /// State of the database.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// When the database was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The URL to the database API endpoint.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDatabasesDatabaseResult(
            bool allowDataBranching,

            bool atBackupRestoreBranchesLimit,

            bool atDevelopmentBranchLimit,

            bool automaticMigrations,

            double branchesCount,

            string branchesUrl,

            string createdAt,

            Outputs.GetDatabasesDatabaseDataImportResult? dataImport,

            string defaultBranch,

            double defaultBranchReadOnlyRegionsCount,

            double defaultBranchShardCount,

            double defaultBranchTableCount,

            double developmentBranchesCount,

            string htmlUrl,

            string id,

            bool insightsRawQueries,

            double issuesCount,

            string migrationFramework,

            string migrationTableName,

            bool multipleAdminsRequiredForDeletion,

            string name,

            string organization,

            string plan,

            bool productionBranchWebConsole,

            double productionBranchesCount,

            bool ready,

            Outputs.GetDatabasesDatabaseRegionResult region,

            bool requireApprovalForDeploy,

            bool restrictBranchRegion,

            string schemaLastUpdatedAt,

            bool sharded,

            string state,

            string updatedAt,

            string url)
        {
            AllowDataBranching = allowDataBranching;
            AtBackupRestoreBranchesLimit = atBackupRestoreBranchesLimit;
            AtDevelopmentBranchLimit = atDevelopmentBranchLimit;
            AutomaticMigrations = automaticMigrations;
            BranchesCount = branchesCount;
            BranchesUrl = branchesUrl;
            CreatedAt = createdAt;
            DataImport = dataImport;
            DefaultBranch = defaultBranch;
            DefaultBranchReadOnlyRegionsCount = defaultBranchReadOnlyRegionsCount;
            DefaultBranchShardCount = defaultBranchShardCount;
            DefaultBranchTableCount = defaultBranchTableCount;
            DevelopmentBranchesCount = developmentBranchesCount;
            HtmlUrl = htmlUrl;
            Id = id;
            InsightsRawQueries = insightsRawQueries;
            IssuesCount = issuesCount;
            MigrationFramework = migrationFramework;
            MigrationTableName = migrationTableName;
            MultipleAdminsRequiredForDeletion = multipleAdminsRequiredForDeletion;
            Name = name;
            Organization = organization;
            Plan = plan;
            ProductionBranchWebConsole = productionBranchWebConsole;
            ProductionBranchesCount = productionBranchesCount;
            Ready = ready;
            Region = region;
            RequireApprovalForDeploy = requireApprovalForDeploy;
            RestrictBranchRegion = restrictBranchRegion;
            SchemaLastUpdatedAt = schemaLastUpdatedAt;
            Sharded = sharded;
            State = state;
            UpdatedAt = updatedAt;
            Url = url;
        }
    }
}
