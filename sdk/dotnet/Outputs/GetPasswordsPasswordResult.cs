// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale.Outputs
{

    [OutputType]
    public sealed class GetPasswordsPasswordResult
    {
        /// <summary>
        /// The host URL for the password.
        /// </summary>
        public readonly string AccessHostUrl;
        /// <summary>
        /// The actor that created this branch.
        /// </summary>
        public readonly Outputs.GetPasswordsPasswordActorResult Actor;
        /// <summary>
        /// The branch this password belongs to..
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// When the password was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The database this branch password belongs to.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// The branch this password is allowed to access.
        /// </summary>
        public readonly Outputs.GetPasswordsPasswordDatabaseBranchResult DatabaseBranch;
        /// <summary>
        /// When the password was deleted.
        /// </summary>
        public readonly string DeletedAt;
        /// <summary>
        /// When the password will expire.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The ID for the password.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The display name for the password.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this database branch password belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// If the password is for a read-only region, the ID of the region.
        /// </summary>
        public readonly string ReadOnlyRegionId;
        /// <summary>
        /// The region in which this password can be used.
        /// </summary>
        public readonly Outputs.GetPasswordsPasswordRegionResult Region;
        /// <summary>
        /// Whether or not the password can be renewed.
        /// </summary>
        public readonly bool Renewable;
        /// <summary>
        /// The role for the password.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        /// </summary>
        public readonly double TtlSeconds;
        /// <summary>
        /// The username for the password.
        /// </summary>
        public readonly string Username;

        [OutputConstructor]
        private GetPasswordsPasswordResult(
            string accessHostUrl,

            Outputs.GetPasswordsPasswordActorResult actor,

            string branch,

            string createdAt,

            string database,

            Outputs.GetPasswordsPasswordDatabaseBranchResult databaseBranch,

            string deletedAt,

            string expiresAt,

            string id,

            string name,

            string organization,

            string readOnlyRegionId,

            Outputs.GetPasswordsPasswordRegionResult region,

            bool renewable,

            string role,

            double ttlSeconds,

            string username)
        {
            AccessHostUrl = accessHostUrl;
            Actor = actor;
            Branch = branch;
            CreatedAt = createdAt;
            Database = database;
            DatabaseBranch = databaseBranch;
            DeletedAt = deletedAt;
            ExpiresAt = expiresAt;
            Id = id;
            Name = name;
            Organization = organization;
            ReadOnlyRegionId = readOnlyRegionId;
            Region = region;
            Renewable = renewable;
            Role = role;
            TtlSeconds = ttlSeconds;
            Username = username;
        }
    }
}
