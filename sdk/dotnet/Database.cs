// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    /// <summary>
    /// A PlanetScale database.
    /// 
    /// Known limitations:
    /// - When the provider is configured with a service token, the service token needs to manually be granted permission on this database resource. This can be done in the UI or via the CLI (`pscale service-token add-access`).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Planetscale = Pulumi.Planetscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Planetscale.Database("example", new()
    ///     {
    ///         Organization = "example",
    ///         Name = "anotherdb",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PlanetscaleResourceType("planetscale:index/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        [Output("allowDataBranching")]
        public Output<bool> AllowDataBranching { get; private set; } = null!;

        /// <summary>
        /// If the database has reached its backup restored branch limit.
        /// </summary>
        [Output("atBackupRestoreBranchesLimit")]
        public Output<bool> AtBackupRestoreBranchesLimit { get; private set; } = null!;

        /// <summary>
        /// If the database has reached its development branch limit.
        /// </summary>
        [Output("atDevelopmentBranchLimit")]
        public Output<bool> AtDevelopmentBranchLimit { get; private set; } = null!;

        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        [Output("automaticMigrations")]
        public Output<bool> AutomaticMigrations { get; private set; } = null!;

        /// <summary>
        /// The total number of database branches.
        /// </summary>
        [Output("branchesCount")]
        public Output<double> BranchesCount { get; private set; } = null!;

        /// <summary>
        /// The URL to retrieve this database's branches via the API.
        /// </summary>
        [Output("branchesUrl")]
        public Output<string> BranchesUrl { get; private set; } = null!;

        /// <summary>
        /// The size of the database cluster plan.
        /// </summary>
        [Output("clusterSize")]
        public Output<string> ClusterSize { get; private set; } = null!;

        /// <summary>
        /// When the database was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        [Output("dataImport")]
        public Output<Outputs.DatabaseDataImport> DataImport { get; private set; } = null!;

        /// <summary>
        /// The default branch for the database.
        /// </summary>
        [Output("defaultBranch")]
        public Output<string> DefaultBranch { get; private set; } = null!;

        /// <summary>
        /// Number of read only regions in the default branch.
        /// </summary>
        [Output("defaultBranchReadOnlyRegionsCount")]
        public Output<double> DefaultBranchReadOnlyRegionsCount { get; private set; } = null!;

        /// <summary>
        /// Number of shards in the default branch.
        /// </summary>
        [Output("defaultBranchShardCount")]
        public Output<double> DefaultBranchShardCount { get; private set; } = null!;

        /// <summary>
        /// Number of tables in the default branch schema.
        /// </summary>
        [Output("defaultBranchTableCount")]
        public Output<double> DefaultBranchTableCount { get; private set; } = null!;

        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        [Output("developmentBranchesCount")]
        public Output<double> DevelopmentBranchesCount { get; private set; } = null!;

        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        [Output("htmlUrl")]
        public Output<string> HtmlUrl { get; private set; } = null!;

        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        [Output("insightsRawQueries")]
        public Output<bool> InsightsRawQueries { get; private set; } = null!;

        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        [Output("issuesCount")]
        public Output<double> IssuesCount { get; private set; } = null!;

        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        [Output("migrationFramework")]
        public Output<string> MigrationFramework { get; private set; } = null!;

        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        [Output("migrationTableName")]
        public Output<string> MigrationTableName { get; private set; } = null!;

        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        [Output("multipleAdminsRequiredForDeletion")]
        public Output<bool> MultipleAdminsRequiredForDeletion { get; private set; } = null!;

        /// <summary>
        /// The name of this database.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The database plan.
        /// </summary>
        [Output("plan")]
        public Output<string> Plan { get; private set; } = null!;

        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        [Output("productionBranchWebConsole")]
        public Output<bool> ProductionBranchWebConsole { get; private set; } = null!;

        /// <summary>
        /// The total number of database production branches.
        /// </summary>
        [Output("productionBranchesCount")]
        public Output<double> ProductionBranchesCount { get; private set; } = null!;

        /// <summary>
        /// If the database is ready to be used.
        /// </summary>
        [Output("ready")]
        public Output<bool> Ready { get; private set; } = null!;

        /// <summary>
        /// The region the database lives in.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        [Output("requireApprovalForDeploy")]
        public Output<bool> RequireApprovalForDeploy { get; private set; } = null!;

        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        [Output("restrictBranchRegion")]
        public Output<bool> RestrictBranchRegion { get; private set; } = null!;

        /// <summary>
        /// When the default branch schema was last changed.
        /// </summary>
        [Output("schemaLastUpdatedAt")]
        public Output<string> SchemaLastUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// If the database is sharded.
        /// </summary>
        [Output("sharded")]
        public Output<bool> Sharded { get; private set; } = null!;

        /// <summary>
        /// State of the database.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// When the database was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The URL to the database API endpoint.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("planetscale:index/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("planetscale:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        [Input("allowDataBranching")]
        public Input<bool>? AllowDataBranching { get; set; }

        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        [Input("automaticMigrations")]
        public Input<bool>? AutomaticMigrations { get; set; }

        /// <summary>
        /// The size of the database cluster plan.
        /// </summary>
        [Input("clusterSize")]
        public Input<string>? ClusterSize { get; set; }

        /// <summary>
        /// The default branch for the database.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        [Input("insightsRawQueries")]
        public Input<bool>? InsightsRawQueries { get; set; }

        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        [Input("issuesCount")]
        public Input<double>? IssuesCount { get; set; }

        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        [Input("migrationFramework")]
        public Input<string>? MigrationFramework { get; set; }

        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        [Input("migrationTableName")]
        public Input<string>? MigrationTableName { get; set; }

        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        [Input("multipleAdminsRequiredForDeletion")]
        public Input<bool>? MultipleAdminsRequiredForDeletion { get; set; }

        /// <summary>
        /// The name of this database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The database plan.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        [Input("productionBranchWebConsole")]
        public Input<bool>? ProductionBranchWebConsole { get; set; }

        /// <summary>
        /// The region the database lives in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        [Input("requireApprovalForDeploy")]
        public Input<bool>? RequireApprovalForDeploy { get; set; }

        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        [Input("restrictBranchRegion")]
        public Input<bool>? RestrictBranchRegion { get; set; }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        [Input("allowDataBranching")]
        public Input<bool>? AllowDataBranching { get; set; }

        /// <summary>
        /// If the database has reached its backup restored branch limit.
        /// </summary>
        [Input("atBackupRestoreBranchesLimit")]
        public Input<bool>? AtBackupRestoreBranchesLimit { get; set; }

        /// <summary>
        /// If the database has reached its development branch limit.
        /// </summary>
        [Input("atDevelopmentBranchLimit")]
        public Input<bool>? AtDevelopmentBranchLimit { get; set; }

        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        [Input("automaticMigrations")]
        public Input<bool>? AutomaticMigrations { get; set; }

        /// <summary>
        /// The total number of database branches.
        /// </summary>
        [Input("branchesCount")]
        public Input<double>? BranchesCount { get; set; }

        /// <summary>
        /// The URL to retrieve this database's branches via the API.
        /// </summary>
        [Input("branchesUrl")]
        public Input<string>? BranchesUrl { get; set; }

        /// <summary>
        /// The size of the database cluster plan.
        /// </summary>
        [Input("clusterSize")]
        public Input<string>? ClusterSize { get; set; }

        /// <summary>
        /// When the database was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        [Input("dataImport")]
        public Input<Inputs.DatabaseDataImportGetArgs>? DataImport { get; set; }

        /// <summary>
        /// The default branch for the database.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// Number of read only regions in the default branch.
        /// </summary>
        [Input("defaultBranchReadOnlyRegionsCount")]
        public Input<double>? DefaultBranchReadOnlyRegionsCount { get; set; }

        /// <summary>
        /// Number of shards in the default branch.
        /// </summary>
        [Input("defaultBranchShardCount")]
        public Input<double>? DefaultBranchShardCount { get; set; }

        /// <summary>
        /// Number of tables in the default branch schema.
        /// </summary>
        [Input("defaultBranchTableCount")]
        public Input<double>? DefaultBranchTableCount { get; set; }

        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        [Input("developmentBranchesCount")]
        public Input<double>? DevelopmentBranchesCount { get; set; }

        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        [Input("htmlUrl")]
        public Input<string>? HtmlUrl { get; set; }

        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        [Input("insightsRawQueries")]
        public Input<bool>? InsightsRawQueries { get; set; }

        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        [Input("issuesCount")]
        public Input<double>? IssuesCount { get; set; }

        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        [Input("migrationFramework")]
        public Input<string>? MigrationFramework { get; set; }

        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        [Input("migrationTableName")]
        public Input<string>? MigrationTableName { get; set; }

        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        [Input("multipleAdminsRequiredForDeletion")]
        public Input<bool>? MultipleAdminsRequiredForDeletion { get; set; }

        /// <summary>
        /// The name of this database.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The database plan.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        [Input("productionBranchWebConsole")]
        public Input<bool>? ProductionBranchWebConsole { get; set; }

        /// <summary>
        /// The total number of database production branches.
        /// </summary>
        [Input("productionBranchesCount")]
        public Input<double>? ProductionBranchesCount { get; set; }

        /// <summary>
        /// If the database is ready to be used.
        /// </summary>
        [Input("ready")]
        public Input<bool>? Ready { get; set; }

        /// <summary>
        /// The region the database lives in.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        [Input("requireApprovalForDeploy")]
        public Input<bool>? RequireApprovalForDeploy { get; set; }

        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        [Input("restrictBranchRegion")]
        public Input<bool>? RestrictBranchRegion { get; set; }

        /// <summary>
        /// When the default branch schema was last changed.
        /// </summary>
        [Input("schemaLastUpdatedAt")]
        public Input<string>? SchemaLastUpdatedAt { get; set; }

        /// <summary>
        /// If the database is sharded.
        /// </summary>
        [Input("sharded")]
        public Input<bool>? Sharded { get; set; }

        /// <summary>
        /// State of the database.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// When the database was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The URL to the database API endpoint.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
