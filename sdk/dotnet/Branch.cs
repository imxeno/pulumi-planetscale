// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    /// <summary>
    /// A PlanetScale branch.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Planetscale = Pulumi.Planetscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Planetscale.Branch("example", new()
    ///     {
    ///         Organization = "example",
    ///         Database = "example_db",
    ///         Name = "antoinewritescode",
    ///         ParentBranch = "main",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [PlanetscaleResourceType("planetscale:index/branch:Branch")]
    public partial class Branch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The actor who created this branch.
        /// </summary>
        [Output("actor")]
        public Output<Outputs.BranchActor> Actor { get; private set; } = null!;

        /// <summary>
        /// The SKU representing the branch's cluster size.
        /// </summary>
        [Output("clusterRateName")]
        public Output<string> ClusterRateName { get; private set; } = null!;

        /// <summary>
        /// When the branch was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        [Output("database")]
        public Output<string> Database { get; private set; } = null!;

        /// <summary>
        /// Planetscale app URL for the branch.
        /// </summary>
        [Output("htmlUrl")]
        public Output<string> HtmlUrl { get; private set; } = null!;

        /// <summary>
        /// The MySQL address for the branch.
        /// </summary>
        [Output("mysqlAddress")]
        public Output<string> MysqlAddress { get; private set; } = null!;

        /// <summary>
        /// The address of the MySQL provider for the branch.
        /// </summary>
        [Output("mysqlEdgeAddress")]
        public Output<string> MysqlEdgeAddress { get; private set; } = null!;

        /// <summary>
        /// The name of the branch.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        [Output("organization")]
        public Output<string> Organization { get; private set; } = null!;

        /// <summary>
        /// The name of the parent branch from which the branch was created.
        /// </summary>
        [Output("parentBranch")]
        public Output<string> ParentBranch { get; private set; } = null!;

        /// <summary>
        /// Whether or not the branch is a production branch.
        /// </summary>
        [Output("production")]
        public Output<bool> Production { get; private set; } = null!;

        /// <summary>
        /// Whether or not the branch is ready to serve queries.
        /// </summary>
        [Output("ready")]
        public Output<bool> Ready { get; private set; } = null!;

        /// <summary>
        /// The region in which this branch lives.
        /// </summary>
        [Output("region")]
        public Output<Outputs.BranchRegion> Region { get; private set; } = null!;

        /// <summary>
        /// When a user last marked a backup restore checklist as completed.
        /// </summary>
        [Output("restoreChecklistCompletedAt")]
        public Output<string> RestoreChecklistCompletedAt { get; private set; } = null!;

        /// <summary>
        /// todo
        /// </summary>
        [Output("restoredFromBranch")]
        public Output<Outputs.BranchRestoredFromBranch> RestoredFromBranch { get; private set; } = null!;

        /// <summary>
        /// When the schema for the branch was last updated.
        /// </summary>
        [Output("schemaLastUpdatedAt")]
        public Output<string> SchemaLastUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The number of shards in the branch.
        /// </summary>
        [Output("shardCount")]
        public Output<double> ShardCount { get; private set; } = null!;

        /// <summary>
        /// Whether or not the branch is sharded.
        /// </summary>
        [Output("sharded")]
        public Output<bool> Sharded { get; private set; } = null!;

        /// <summary>
        /// When the branch was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Branch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Branch(string name, BranchArgs args, CustomResourceOptions? options = null)
            : base("planetscale:index/branch:Branch", name, args ?? new BranchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Branch(string name, Input<string> id, BranchState? state = null, CustomResourceOptions? options = null)
            : base("planetscale:index/branch:Branch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Branch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Branch Get(string name, Input<string> id, BranchState? state = null, CustomResourceOptions? options = null)
        {
            return new Branch(name, id, state, options);
        }
    }

    public sealed class BranchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The name of the branch.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The name of the parent branch from which the branch was created.
        /// </summary>
        [Input("parentBranch", required: true)]
        public Input<string> ParentBranch { get; set; } = null!;

        /// <summary>
        /// Whether or not the branch is a production branch.
        /// </summary>
        [Input("production")]
        public Input<bool>? Production { get; set; }

        public BranchArgs()
        {
        }
        public static new BranchArgs Empty => new BranchArgs();
    }

    public sealed class BranchState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The actor who created this branch.
        /// </summary>
        [Input("actor")]
        public Input<Inputs.BranchActorGetArgs>? Actor { get; set; }

        /// <summary>
        /// The SKU representing the branch's cluster size.
        /// </summary>
        [Input("clusterRateName")]
        public Input<string>? ClusterRateName { get; set; }

        /// <summary>
        /// When the branch was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// Planetscale app URL for the branch.
        /// </summary>
        [Input("htmlUrl")]
        public Input<string>? HtmlUrl { get; set; }

        /// <summary>
        /// The MySQL address for the branch.
        /// </summary>
        [Input("mysqlAddress")]
        public Input<string>? MysqlAddress { get; set; }

        /// <summary>
        /// The address of the MySQL provider for the branch.
        /// </summary>
        [Input("mysqlEdgeAddress")]
        public Input<string>? MysqlEdgeAddress { get; set; }

        /// <summary>
        /// The name of the branch.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        [Input("organization")]
        public Input<string>? Organization { get; set; }

        /// <summary>
        /// The name of the parent branch from which the branch was created.
        /// </summary>
        [Input("parentBranch")]
        public Input<string>? ParentBranch { get; set; }

        /// <summary>
        /// Whether or not the branch is a production branch.
        /// </summary>
        [Input("production")]
        public Input<bool>? Production { get; set; }

        /// <summary>
        /// Whether or not the branch is ready to serve queries.
        /// </summary>
        [Input("ready")]
        public Input<bool>? Ready { get; set; }

        /// <summary>
        /// The region in which this branch lives.
        /// </summary>
        [Input("region")]
        public Input<Inputs.BranchRegionGetArgs>? Region { get; set; }

        /// <summary>
        /// When a user last marked a backup restore checklist as completed.
        /// </summary>
        [Input("restoreChecklistCompletedAt")]
        public Input<string>? RestoreChecklistCompletedAt { get; set; }

        /// <summary>
        /// todo
        /// </summary>
        [Input("restoredFromBranch")]
        public Input<Inputs.BranchRestoredFromBranchGetArgs>? RestoredFromBranch { get; set; }

        /// <summary>
        /// When the schema for the branch was last updated.
        /// </summary>
        [Input("schemaLastUpdatedAt")]
        public Input<string>? SchemaLastUpdatedAt { get; set; }

        /// <summary>
        /// The number of shards in the branch.
        /// </summary>
        [Input("shardCount")]
        public Input<double>? ShardCount { get; set; }

        /// <summary>
        /// Whether or not the branch is sharded.
        /// </summary>
        [Input("sharded")]
        public Input<bool>? Sharded { get; set; }

        /// <summary>
        /// When the branch was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public BranchState()
        {
        }
        public static new BranchState Empty => new BranchState();
    }
}
