// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetUser
    {
        /// <summary>
        /// A PlanetScale user.
        /// 
        /// Known limitations:
        /// - Does not work when the provider is configured with a service token.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // doesn't work right now for some reason
        ///     var example = Planetscale.GetUser.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["currentUser"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("planetscale:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// A PlanetScale user.
        /// 
        /// Known limitations:
        /// - Does not work when the provider is configured with a service token.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // doesn't work right now for some reason
        ///     var example = Planetscale.GetUser.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["currentUser"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("planetscale:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// A PlanetScale user.
        /// 
        /// Known limitations:
        /// - Does not work when the provider is configured with a service token.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // doesn't work right now for some reason
        ///     var example = Planetscale.GetUser.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["currentUser"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("planetscale:index/getUser:getUser", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// The URL source of the user's avatar.
        /// </summary>
        public readonly string AvatarUrl;
        /// <summary>
        /// When the user was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The default organization for the user.
        /// </summary>
        public readonly Outputs.GetUserDefaultOrganizationResult DefaultOrganization;
        /// <summary>
        /// Whether or not the user is managed by a WorkOS directory.
        /// </summary>
        public readonly bool DirectoryManaged;
        /// <summary>
        /// The display name of the user.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The email of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// Whether or not the user is verified by email.
        /// </summary>
        public readonly bool EmailVerified;
        /// <summary>
        /// The ID of the user.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether or not the user is managed by an authentication provider.
        /// </summary>
        public readonly bool Managed;
        /// <summary>
        /// The name of the user.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether or not the user is managed by WorkOS.
        /// </summary>
        public readonly bool Sso;
        /// <summary>
        /// Whether or not the user has configured two factor authentication.
        /// </summary>
        public readonly bool TwoFactorAuthConfigured;
        /// <summary>
        /// When the user was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetUserResult(
            string avatarUrl,

            string createdAt,

            Outputs.GetUserDefaultOrganizationResult defaultOrganization,

            bool directoryManaged,

            string displayName,

            string email,

            bool emailVerified,

            string id,

            bool managed,

            string name,

            bool sso,

            bool twoFactorAuthConfigured,

            string updatedAt)
        {
            AvatarUrl = avatarUrl;
            CreatedAt = createdAt;
            DefaultOrganization = defaultOrganization;
            DirectoryManaged = directoryManaged;
            DisplayName = displayName;
            Email = email;
            EmailVerified = emailVerified;
            Id = id;
            Managed = managed;
            Name = name;
            Sso = sso;
            TwoFactorAuthConfigured = twoFactorAuthConfigured;
            UpdatedAt = updatedAt;
        }
    }
}
