// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetBranch
    {
        /// <summary>
        /// A PlanetScale branch.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBranch.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Name = "main",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["branch"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetBranchResult> InvokeAsync(GetBranchArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBranchResult>("planetscale:index/getBranch:getBranch", args ?? new GetBranchArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale branch.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBranch.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Name = "main",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["branch"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBranchResult> Invoke(GetBranchInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBranchResult>("planetscale:index/getBranch:getBranch", args ?? new GetBranchInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale branch.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBranch.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Name = "main",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["branch"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBranchResult> Invoke(GetBranchInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBranchResult>("planetscale:index/getBranch:getBranch", args ?? new GetBranchInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBranchArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        /// <summary>
        /// The name of the branch.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        public GetBranchArgs()
        {
        }
        public static new GetBranchArgs Empty => new GetBranchArgs();
    }

    public sealed class GetBranchInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The name of the branch.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        public GetBranchInvokeArgs()
        {
        }
        public static new GetBranchInvokeArgs Empty => new GetBranchInvokeArgs();
    }


    [OutputType]
    public sealed class GetBranchResult
    {
        /// <summary>
        /// The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.
        /// </summary>
        public readonly string AccessHostUrl;
        /// <summary>
        /// The actor who created this branch.
        /// </summary>
        public readonly Outputs.GetBranchActorResult Actor;
        /// <summary>
        /// The SKU representing the branch's cluster size.
        /// </summary>
        public readonly string ClusterRateName;
        /// <summary>
        /// When the branch was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The database this branch belongs to.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// Planetscale app URL for the branch.
        /// </summary>
        public readonly string HtmlUrl;
        /// <summary>
        /// The ID of the branch.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the backup from which the branch was restored.
        /// </summary>
        public readonly string InitialRestoreId;
        /// <summary>
        /// The MySQL address for the branch.
        /// </summary>
        public readonly string MysqlAddress;
        /// <summary>
        /// The address of the MySQL provider for the branch.
        /// </summary>
        public readonly string MysqlEdgeAddress;
        /// <summary>
        /// The name of the branch.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this branch belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The name of the parent branch from which the branch was created.
        /// </summary>
        public readonly string ParentBranch;
        /// <summary>
        /// Whether or not the branch is a production branch.
        /// </summary>
        public readonly bool Production;
        /// <summary>
        /// Whether or not the branch is ready to serve queries.
        /// </summary>
        public readonly bool Ready;
        /// <summary>
        /// The region in which this branch lives.
        /// </summary>
        public readonly Outputs.GetBranchRegionResult Region;
        /// <summary>
        /// When a user last marked a backup restore checklist as completed.
        /// </summary>
        public readonly string RestoreChecklistCompletedAt;
        public readonly Outputs.GetBranchRestoredFromBranchResult RestoredFromBranch;
        /// <summary>
        /// When the schema for the branch was last updated.
        /// </summary>
        public readonly string SchemaLastUpdatedAt;
        /// <summary>
        /// The number of shards in the branch.
        /// </summary>
        public readonly double ShardCount;
        /// <summary>
        /// Whether or not the branch is sharded.
        /// </summary>
        public readonly bool Sharded;
        /// <summary>
        /// When the branch was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetBranchResult(
            string accessHostUrl,

            Outputs.GetBranchActorResult actor,

            string clusterRateName,

            string createdAt,

            string database,

            string htmlUrl,

            string id,

            string initialRestoreId,

            string mysqlAddress,

            string mysqlEdgeAddress,

            string name,

            string organization,

            string parentBranch,

            bool production,

            bool ready,

            Outputs.GetBranchRegionResult region,

            string restoreChecklistCompletedAt,

            Outputs.GetBranchRestoredFromBranchResult restoredFromBranch,

            string schemaLastUpdatedAt,

            double shardCount,

            bool sharded,

            string updatedAt)
        {
            AccessHostUrl = accessHostUrl;
            Actor = actor;
            ClusterRateName = clusterRateName;
            CreatedAt = createdAt;
            Database = database;
            HtmlUrl = htmlUrl;
            Id = id;
            InitialRestoreId = initialRestoreId;
            MysqlAddress = mysqlAddress;
            MysqlEdgeAddress = mysqlEdgeAddress;
            Name = name;
            Organization = organization;
            ParentBranch = parentBranch;
            Production = production;
            Ready = ready;
            Region = region;
            RestoreChecklistCompletedAt = restoreChecklistCompletedAt;
            RestoredFromBranch = restoredFromBranch;
            SchemaLastUpdatedAt = schemaLastUpdatedAt;
            ShardCount = shardCount;
            Sharded = sharded;
            UpdatedAt = updatedAt;
        }
    }
}
