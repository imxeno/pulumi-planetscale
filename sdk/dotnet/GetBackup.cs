// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetBackup
    {
        /// <summary>
        /// A PlanetScale backup.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBackup.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Branch = "main",
        ///         Id = "k20nb1b7ut18",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["backup"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackupResult> InvokeAsync(GetBackupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupResult>("planetscale:index/getBackup:getBackup", args ?? new GetBackupArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale backup.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBackup.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Branch = "main",
        ///         Id = "k20nb1b7ut18",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["backup"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupResult>("planetscale:index/getBackup:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale backup.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetBackup.Invoke(new()
        ///     {
        ///         Organization = "example.com",
        ///         Database = "example_db",
        ///         Branch = "main",
        ///         Id = "k20nb1b7ut18",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["backup"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupResult> Invoke(GetBackupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupResult>("planetscale:index/getBackup:getBackup", args ?? new GetBackupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The branch this backup belongs to.
        /// </summary>
        [Input("branch", required: true)]
        public string Branch { get; set; } = null!;

        /// <summary>
        /// The database this backup belongs to.
        /// </summary>
        [Input("database", required: true)]
        public string Database { get; set; } = null!;

        /// <summary>
        /// The ID of the backup.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// The organization this backup belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        public GetBackupArgs()
        {
        }
        public static new GetBackupArgs Empty => new GetBackupArgs();
    }

    public sealed class GetBackupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The branch this backup belongs to.
        /// </summary>
        [Input("branch", required: true)]
        public Input<string> Branch { get; set; } = null!;

        /// <summary>
        /// The database this backup belongs to.
        /// </summary>
        [Input("database", required: true)]
        public Input<string> Database { get; set; } = null!;

        /// <summary>
        /// The ID of the backup.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// The organization this backup belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        public GetBackupInvokeArgs()
        {
        }
        public static new GetBackupInvokeArgs Empty => new GetBackupInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupResult
    {
        /// <summary>
        /// The actor that created the backup.
        /// </summary>
        public readonly Outputs.GetBackupActorResult Actor;
        /// <summary>
        /// The backup policy being followed.
        /// </summary>
        public readonly Outputs.GetBackupBackupPolicyResult BackupPolicy;
        /// <summary>
        /// The branch this backup belongs to.
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// When the backup was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The database this backup belongs to.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// The estimated storage cost of the backup.
        /// </summary>
        public readonly double EstimatedStorageCost;
        /// <summary>
        /// The ID of the backup.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the backup.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this backup belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// Whether or not the backup policy is required.
        /// </summary>
        public readonly bool Required;
        /// <summary>
        /// Branches that have been restored with this backup.
        /// </summary>
        public readonly ImmutableArray<string> RestoredBranches;
        /// <summary>
        /// The size of the backup.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// The current state of the backup.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// When the backup was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetBackupResult(
            Outputs.GetBackupActorResult actor,

            Outputs.GetBackupBackupPolicyResult backupPolicy,

            string branch,

            string createdAt,

            string database,

            double estimatedStorageCost,

            string id,

            string name,

            string organization,

            bool required,

            ImmutableArray<string> restoredBranches,

            double size,

            string state,

            string updatedAt)
        {
            Actor = actor;
            BackupPolicy = backupPolicy;
            Branch = branch;
            CreatedAt = createdAt;
            Database = database;
            EstimatedStorageCost = estimatedStorageCost;
            Id = id;
            Name = name;
            Organization = organization;
            Required = required;
            RestoredBranches = restoredBranches;
            Size = size;
            State = state;
            UpdatedAt = updatedAt;
        }
    }
}
