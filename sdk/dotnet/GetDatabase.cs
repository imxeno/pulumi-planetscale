// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Planetscale
{
    public static class GetDatabase
    {
        /// <summary>
        /// A PlanetScale database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabase.Invoke(new()
        ///     {
        ///         Organization = "example",
        ///         Name = "again",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetDatabaseResult> InvokeAsync(GetDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseResult>("planetscale:index/getDatabase:getDatabase", args ?? new GetDatabaseArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabase.Invoke(new()
        ///     {
        ///         Organization = "example",
        ///         Name = "again",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("planetscale:index/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// A PlanetScale database.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Planetscale = Pulumi.Planetscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Planetscale.GetDatabase.Invoke(new()
        ///     {
        ///         Organization = "example",
        ///         Name = "again",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["db"] = example,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetDatabaseResult> Invoke(GetDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDatabaseResult>("planetscale:index/getDatabase:getDatabase", args ?? new GetDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        [Input("allowDataBranching")]
        public bool? AllowDataBranching { get; set; }

        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        [Input("automaticMigrations")]
        public bool? AutomaticMigrations { get; set; }

        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        [Input("dataImport")]
        public Inputs.GetDatabaseDataImportArgs? DataImport { get; set; }

        /// <summary>
        /// The default branch for the database.
        /// </summary>
        [Input("defaultBranch")]
        public string? DefaultBranch { get; set; }

        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        [Input("insightsRawQueries")]
        public bool? InsightsRawQueries { get; set; }

        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        [Input("issuesCount")]
        public double? IssuesCount { get; set; }

        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        [Input("migrationFramework")]
        public string? MigrationFramework { get; set; }

        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        [Input("migrationTableName")]
        public string? MigrationTableName { get; set; }

        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        [Input("multipleAdminsRequiredForDeletion")]
        public bool? MultipleAdminsRequiredForDeletion { get; set; }

        /// <summary>
        /// The name of this database.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public string Organization { get; set; } = null!;

        /// <summary>
        /// The database plan.
        /// </summary>
        [Input("plan")]
        public string? Plan { get; set; }

        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        [Input("productionBranchWebConsole")]
        public bool? ProductionBranchWebConsole { get; set; }

        /// <summary>
        /// The region the database lives in.
        /// </summary>
        [Input("region")]
        public Inputs.GetDatabaseRegionArgs? Region { get; set; }

        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        [Input("requireApprovalForDeploy")]
        public bool? RequireApprovalForDeploy { get; set; }

        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        [Input("restrictBranchRegion")]
        public bool? RestrictBranchRegion { get; set; }

        public GetDatabaseArgs()
        {
        }
        public static new GetDatabaseArgs Empty => new GetDatabaseArgs();
    }

    public sealed class GetDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        [Input("allowDataBranching")]
        public Input<bool>? AllowDataBranching { get; set; }

        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        [Input("automaticMigrations")]
        public Input<bool>? AutomaticMigrations { get; set; }

        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        [Input("dataImport")]
        public Input<Inputs.GetDatabaseDataImportInputArgs>? DataImport { get; set; }

        /// <summary>
        /// The default branch for the database.
        /// </summary>
        [Input("defaultBranch")]
        public Input<string>? DefaultBranch { get; set; }

        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        [Input("insightsRawQueries")]
        public Input<bool>? InsightsRawQueries { get; set; }

        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        [Input("issuesCount")]
        public Input<double>? IssuesCount { get; set; }

        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        [Input("migrationFramework")]
        public Input<string>? MigrationFramework { get; set; }

        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        [Input("migrationTableName")]
        public Input<string>? MigrationTableName { get; set; }

        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        [Input("multipleAdminsRequiredForDeletion")]
        public Input<bool>? MultipleAdminsRequiredForDeletion { get; set; }

        /// <summary>
        /// The name of this database.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        [Input("organization", required: true)]
        public Input<string> Organization { get; set; } = null!;

        /// <summary>
        /// The database plan.
        /// </summary>
        [Input("plan")]
        public Input<string>? Plan { get; set; }

        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        [Input("productionBranchWebConsole")]
        public Input<bool>? ProductionBranchWebConsole { get; set; }

        /// <summary>
        /// The region the database lives in.
        /// </summary>
        [Input("region")]
        public Input<Inputs.GetDatabaseRegionInputArgs>? Region { get; set; }

        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        [Input("requireApprovalForDeploy")]
        public Input<bool>? RequireApprovalForDeploy { get; set; }

        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        [Input("restrictBranchRegion")]
        public Input<bool>? RestrictBranchRegion { get; set; }

        public GetDatabaseInvokeArgs()
        {
        }
        public static new GetDatabaseInvokeArgs Empty => new GetDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetDatabaseResult
    {
        /// <summary>
        /// Whether seeding branches with data is enabled for all branches.
        /// </summary>
        public readonly bool AllowDataBranching;
        /// <summary>
        /// If the database has reached its backup restored branch limit.
        /// </summary>
        public readonly bool AtBackupRestoreBranchesLimit;
        /// <summary>
        /// If the database has reached its development branch limit.
        /// </summary>
        public readonly bool AtDevelopmentBranchLimit;
        /// <summary>
        /// Whether to automatically manage Rails migrations during deploy requests.
        /// </summary>
        public readonly bool AutomaticMigrations;
        /// <summary>
        /// The total number of database branches.
        /// </summary>
        public readonly double BranchesCount;
        /// <summary>
        /// The URL to retrieve this database's branches via the API.
        /// </summary>
        public readonly string BranchesUrl;
        /// <summary>
        /// When the database was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// If the database was created from an import, describes the import process.
        /// </summary>
        public readonly Outputs.GetDatabaseDataImportResult? DataImport;
        /// <summary>
        /// The default branch for the database.
        /// </summary>
        public readonly string DefaultBranch;
        /// <summary>
        /// Number of read only regions in the default branch.
        /// </summary>
        public readonly double DefaultBranchReadOnlyRegionsCount;
        /// <summary>
        /// Number of shards in the default branch.
        /// </summary>
        public readonly double DefaultBranchShardCount;
        /// <summary>
        /// Number of tables in the default branch schema.
        /// </summary>
        public readonly double DefaultBranchTableCount;
        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        public readonly double DevelopmentBranchesCount;
        /// <summary>
        /// The total number of database development branches.
        /// </summary>
        public readonly string HtmlUrl;
        /// <summary>
        /// The ID of the database.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The URL to see this database's branches in the web UI.
        /// </summary>
        public readonly bool InsightsRawQueries;
        /// <summary>
        /// The total number of ongoing issues within a database.
        /// </summary>
        public readonly double IssuesCount;
        /// <summary>
        /// Framework used for applying migrations.
        /// </summary>
        public readonly string MigrationFramework;
        /// <summary>
        /// Table name to use for copying schema migration data.
        /// </summary>
        public readonly string MigrationTableName;
        /// <summary>
        /// If the database requires multiple admins for deletion.
        /// </summary>
        public readonly bool MultipleAdminsRequiredForDeletion;
        /// <summary>
        /// The name of this database.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The organization this database belongs to.
        /// </summary>
        public readonly string Organization;
        /// <summary>
        /// The database plan.
        /// </summary>
        public readonly string Plan;
        /// <summary>
        /// Whether web console is enabled for production branches.
        /// </summary>
        public readonly bool ProductionBranchWebConsole;
        /// <summary>
        /// The total number of database production branches.
        /// </summary>
        public readonly double ProductionBranchesCount;
        /// <summary>
        /// If the database is ready to be used.
        /// </summary>
        public readonly bool Ready;
        /// <summary>
        /// The region the database lives in.
        /// </summary>
        public readonly Outputs.GetDatabaseRegionResult Region;
        /// <summary>
        /// Whether an approval is required to deploy schema changes to this database.
        /// </summary>
        public readonly bool RequireApprovalForDeploy;
        /// <summary>
        /// Whether to restrict branch creation to one region.
        /// </summary>
        public readonly bool RestrictBranchRegion;
        /// <summary>
        /// When the default branch schema was last changed.
        /// </summary>
        public readonly string SchemaLastUpdatedAt;
        /// <summary>
        /// If the database is sharded.
        /// </summary>
        public readonly bool Sharded;
        /// <summary>
        /// State of the database.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// When the database was last updated.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The URL to the database API endpoint.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetDatabaseResult(
            bool allowDataBranching,

            bool atBackupRestoreBranchesLimit,

            bool atDevelopmentBranchLimit,

            bool automaticMigrations,

            double branchesCount,

            string branchesUrl,

            string createdAt,

            Outputs.GetDatabaseDataImportResult? dataImport,

            string defaultBranch,

            double defaultBranchReadOnlyRegionsCount,

            double defaultBranchShardCount,

            double defaultBranchTableCount,

            double developmentBranchesCount,

            string htmlUrl,

            string id,

            bool insightsRawQueries,

            double issuesCount,

            string migrationFramework,

            string migrationTableName,

            bool multipleAdminsRequiredForDeletion,

            string name,

            string organization,

            string plan,

            bool productionBranchWebConsole,

            double productionBranchesCount,

            bool ready,

            Outputs.GetDatabaseRegionResult region,

            bool requireApprovalForDeploy,

            bool restrictBranchRegion,

            string schemaLastUpdatedAt,

            bool sharded,

            string state,

            string updatedAt,

            string url)
        {
            AllowDataBranching = allowDataBranching;
            AtBackupRestoreBranchesLimit = atBackupRestoreBranchesLimit;
            AtDevelopmentBranchLimit = atDevelopmentBranchLimit;
            AutomaticMigrations = automaticMigrations;
            BranchesCount = branchesCount;
            BranchesUrl = branchesUrl;
            CreatedAt = createdAt;
            DataImport = dataImport;
            DefaultBranch = defaultBranch;
            DefaultBranchReadOnlyRegionsCount = defaultBranchReadOnlyRegionsCount;
            DefaultBranchShardCount = defaultBranchShardCount;
            DefaultBranchTableCount = defaultBranchTableCount;
            DevelopmentBranchesCount = developmentBranchesCount;
            HtmlUrl = htmlUrl;
            Id = id;
            InsightsRawQueries = insightsRawQueries;
            IssuesCount = issuesCount;
            MigrationFramework = migrationFramework;
            MigrationTableName = migrationTableName;
            MultipleAdminsRequiredForDeletion = multipleAdminsRequiredForDeletion;
            Name = name;
            Organization = organization;
            Plan = plan;
            ProductionBranchWebConsole = productionBranchWebConsole;
            ProductionBranchesCount = productionBranchesCount;
            Ready = ready;
            Region = region;
            RequireApprovalForDeploy = requireApprovalForDeploy;
            RestrictBranchRegion = restrictBranchRegion;
            SchemaLastUpdatedAt = schemaLastUpdatedAt;
            Sharded = sharded;
            State = state;
            UpdatedAt = updatedAt;
            Url = url;
        }
    }
}
