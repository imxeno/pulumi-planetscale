# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBranchResult',
    'AwaitableGetBranchResult',
    'get_branch',
    'get_branch_output',
]

@pulumi.output_type
class GetBranchResult:
    """
    A collection of values returned by getBranch.
    """
    def __init__(__self__, access_host_url=None, actor=None, cluster_rate_name=None, created_at=None, database=None, html_url=None, id=None, initial_restore_id=None, mysql_address=None, mysql_edge_address=None, name=None, organization=None, parent_branch=None, production=None, ready=None, region=None, restore_checklist_completed_at=None, restored_from_branch=None, schema_last_updated_at=None, shard_count=None, sharded=None, updated_at=None):
        if access_host_url and not isinstance(access_host_url, str):
            raise TypeError("Expected argument 'access_host_url' to be a str")
        pulumi.set(__self__, "access_host_url", access_host_url)
        if actor and not isinstance(actor, dict):
            raise TypeError("Expected argument 'actor' to be a dict")
        pulumi.set(__self__, "actor", actor)
        if cluster_rate_name and not isinstance(cluster_rate_name, str):
            raise TypeError("Expected argument 'cluster_rate_name' to be a str")
        pulumi.set(__self__, "cluster_rate_name", cluster_rate_name)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if html_url and not isinstance(html_url, str):
            raise TypeError("Expected argument 'html_url' to be a str")
        pulumi.set(__self__, "html_url", html_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if initial_restore_id and not isinstance(initial_restore_id, str):
            raise TypeError("Expected argument 'initial_restore_id' to be a str")
        pulumi.set(__self__, "initial_restore_id", initial_restore_id)
        if mysql_address and not isinstance(mysql_address, str):
            raise TypeError("Expected argument 'mysql_address' to be a str")
        pulumi.set(__self__, "mysql_address", mysql_address)
        if mysql_edge_address and not isinstance(mysql_edge_address, str):
            raise TypeError("Expected argument 'mysql_edge_address' to be a str")
        pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if parent_branch and not isinstance(parent_branch, str):
            raise TypeError("Expected argument 'parent_branch' to be a str")
        pulumi.set(__self__, "parent_branch", parent_branch)
        if production and not isinstance(production, bool):
            raise TypeError("Expected argument 'production' to be a bool")
        pulumi.set(__self__, "production", production)
        if ready and not isinstance(ready, bool):
            raise TypeError("Expected argument 'ready' to be a bool")
        pulumi.set(__self__, "ready", ready)
        if region and not isinstance(region, dict):
            raise TypeError("Expected argument 'region' to be a dict")
        pulumi.set(__self__, "region", region)
        if restore_checklist_completed_at and not isinstance(restore_checklist_completed_at, str):
            raise TypeError("Expected argument 'restore_checklist_completed_at' to be a str")
        pulumi.set(__self__, "restore_checklist_completed_at", restore_checklist_completed_at)
        if restored_from_branch and not isinstance(restored_from_branch, dict):
            raise TypeError("Expected argument 'restored_from_branch' to be a dict")
        pulumi.set(__self__, "restored_from_branch", restored_from_branch)
        if schema_last_updated_at and not isinstance(schema_last_updated_at, str):
            raise TypeError("Expected argument 'schema_last_updated_at' to be a str")
        pulumi.set(__self__, "schema_last_updated_at", schema_last_updated_at)
        if shard_count and not isinstance(shard_count, float):
            raise TypeError("Expected argument 'shard_count' to be a float")
        pulumi.set(__self__, "shard_count", shard_count)
        if sharded and not isinstance(sharded, bool):
            raise TypeError("Expected argument 'sharded' to be a bool")
        pulumi.set(__self__, "sharded", sharded)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        """
        The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.
        """
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetBranchActorResult':
        """
        The actor who created this branch.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="clusterRateName")
    def cluster_rate_name(self) -> str:
        """
        The SKU representing the branch's cluster size.
        """
        return pulumi.get(self, "cluster_rate_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the branch was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this branch belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> str:
        """
        Planetscale app URL for the branch.
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the branch.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialRestoreId")
    def initial_restore_id(self) -> str:
        """
        The ID of the backup from which the branch was restored.
        """
        return pulumi.get(self, "initial_restore_id")

    @property
    @pulumi.getter(name="mysqlAddress")
    def mysql_address(self) -> str:
        """
        The MySQL address for the branch.
        """
        return pulumi.get(self, "mysql_address")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> str:
        """
        The address of the MySQL provider for the branch.
        """
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this branch belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="parentBranch")
    def parent_branch(self) -> str:
        """
        The name of the parent branch from which the branch was created.
        """
        return pulumi.get(self, "parent_branch")

    @property
    @pulumi.getter
    def production(self) -> bool:
        """
        Whether or not the branch is a production branch.
        """
        return pulumi.get(self, "production")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Whether or not the branch is ready to serve queries.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetBranchRegionResult':
        """
        The region in which this branch lives.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreChecklistCompletedAt")
    def restore_checklist_completed_at(self) -> str:
        """
        When a user last marked a backup restore checklist as completed.
        """
        return pulumi.get(self, "restore_checklist_completed_at")

    @property
    @pulumi.getter(name="restoredFromBranch")
    def restored_from_branch(self) -> 'outputs.GetBranchRestoredFromBranchResult':
        return pulumi.get(self, "restored_from_branch")

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> str:
        """
        When the schema for the branch was last updated.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> float:
        """
        The number of shards in the branch.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter
    def sharded(self) -> bool:
        """
        Whether or not the branch is sharded.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the branch was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetBranchResult(GetBranchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBranchResult(
            access_host_url=self.access_host_url,
            actor=self.actor,
            cluster_rate_name=self.cluster_rate_name,
            created_at=self.created_at,
            database=self.database,
            html_url=self.html_url,
            id=self.id,
            initial_restore_id=self.initial_restore_id,
            mysql_address=self.mysql_address,
            mysql_edge_address=self.mysql_edge_address,
            name=self.name,
            organization=self.organization,
            parent_branch=self.parent_branch,
            production=self.production,
            ready=self.ready,
            region=self.region,
            restore_checklist_completed_at=self.restore_checklist_completed_at,
            restored_from_branch=self.restored_from_branch,
            schema_last_updated_at=self.schema_last_updated_at,
            shard_count=self.shard_count,
            sharded=self.sharded,
            updated_at=self.updated_at)


def get_branch(database: Optional[str] = None,
               name: Optional[str] = None,
               organization: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBranchResult:
    """
    A PlanetScale branch.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_branch(organization="example.com",
        database="example_db",
        name="main")
    pulumi.export("branch", example)
    ```


    :param str database: The database this branch belongs to.
    :param str name: The name of the branch.
    :param str organization: The organization this branch belongs to.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['name'] = name
    __args__['organization'] = organization
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getBranch:getBranch', __args__, opts=opts, typ=GetBranchResult).value

    return AwaitableGetBranchResult(
        access_host_url=pulumi.get(__ret__, 'access_host_url'),
        actor=pulumi.get(__ret__, 'actor'),
        cluster_rate_name=pulumi.get(__ret__, 'cluster_rate_name'),
        created_at=pulumi.get(__ret__, 'created_at'),
        database=pulumi.get(__ret__, 'database'),
        html_url=pulumi.get(__ret__, 'html_url'),
        id=pulumi.get(__ret__, 'id'),
        initial_restore_id=pulumi.get(__ret__, 'initial_restore_id'),
        mysql_address=pulumi.get(__ret__, 'mysql_address'),
        mysql_edge_address=pulumi.get(__ret__, 'mysql_edge_address'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        parent_branch=pulumi.get(__ret__, 'parent_branch'),
        production=pulumi.get(__ret__, 'production'),
        ready=pulumi.get(__ret__, 'ready'),
        region=pulumi.get(__ret__, 'region'),
        restore_checklist_completed_at=pulumi.get(__ret__, 'restore_checklist_completed_at'),
        restored_from_branch=pulumi.get(__ret__, 'restored_from_branch'),
        schema_last_updated_at=pulumi.get(__ret__, 'schema_last_updated_at'),
        shard_count=pulumi.get(__ret__, 'shard_count'),
        sharded=pulumi.get(__ret__, 'sharded'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_branch_output(database: Optional[pulumi.Input[str]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      organization: Optional[pulumi.Input[str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBranchResult]:
    """
    A PlanetScale branch.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_branch(organization="example.com",
        database="example_db",
        name="main")
    pulumi.export("branch", example)
    ```


    :param str database: The database this branch belongs to.
    :param str name: The name of the branch.
    :param str organization: The organization this branch belongs to.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['name'] = name
    __args__['organization'] = organization
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getBranch:getBranch', __args__, opts=opts, typ=GetBranchResult)
    return __ret__.apply(lambda __response__: GetBranchResult(
        access_host_url=pulumi.get(__response__, 'access_host_url'),
        actor=pulumi.get(__response__, 'actor'),
        cluster_rate_name=pulumi.get(__response__, 'cluster_rate_name'),
        created_at=pulumi.get(__response__, 'created_at'),
        database=pulumi.get(__response__, 'database'),
        html_url=pulumi.get(__response__, 'html_url'),
        id=pulumi.get(__response__, 'id'),
        initial_restore_id=pulumi.get(__response__, 'initial_restore_id'),
        mysql_address=pulumi.get(__response__, 'mysql_address'),
        mysql_edge_address=pulumi.get(__response__, 'mysql_edge_address'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        parent_branch=pulumi.get(__response__, 'parent_branch'),
        production=pulumi.get(__response__, 'production'),
        ready=pulumi.get(__response__, 'ready'),
        region=pulumi.get(__response__, 'region'),
        restore_checklist_completed_at=pulumi.get(__response__, 'restore_checklist_completed_at'),
        restored_from_branch=pulumi.get(__response__, 'restored_from_branch'),
        schema_last_updated_at=pulumi.get(__response__, 'schema_last_updated_at'),
        shard_count=pulumi.get(__response__, 'shard_count'),
        sharded=pulumi.get(__response__, 'sharded'),
        updated_at=pulumi.get(__response__, 'updated_at')))
