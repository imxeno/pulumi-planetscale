# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatabaseArgs', 'Database']

@pulumi.input_type
class DatabaseArgs:
    def __init__(__self__, *,
                 organization: pulumi.Input[str],
                 allow_data_branching: Optional[pulumi.Input[bool]] = None,
                 automatic_migrations: Optional[pulumi.Input[bool]] = None,
                 cluster_size: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 insights_raw_queries: Optional[pulumi.Input[bool]] = None,
                 issues_count: Optional[pulumi.Input[float]] = None,
                 migration_framework: Optional[pulumi.Input[str]] = None,
                 migration_table_name: Optional[pulumi.Input[str]] = None,
                 multiple_admins_required_for_deletion: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 production_branch_web_console: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 require_approval_for_deploy: Optional[pulumi.Input[bool]] = None,
                 restrict_branch_region: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Database resource.
        :param pulumi.Input[str] organization: The organization this database belongs to.
        :param pulumi.Input[bool] allow_data_branching: Whether seeding branches with data is enabled for all branches.
        :param pulumi.Input[bool] automatic_migrations: Whether to automatically manage Rails migrations during deploy requests.
        :param pulumi.Input[str] cluster_size: The size of the database cluster plan.
        :param pulumi.Input[str] default_branch: The default branch for the database.
        :param pulumi.Input[bool] insights_raw_queries: The URL to see this database's branches in the web UI.
        :param pulumi.Input[float] issues_count: The total number of ongoing issues within a database.
        :param pulumi.Input[str] migration_framework: Framework used for applying migrations.
        :param pulumi.Input[str] migration_table_name: Table name to use for copying schema migration data.
        :param pulumi.Input[bool] multiple_admins_required_for_deletion: If the database requires multiple admins for deletion.
        :param pulumi.Input[str] name: The name of this database.
        :param pulumi.Input[str] plan: The database plan.
        :param pulumi.Input[bool] production_branch_web_console: Whether web console is enabled for production branches.
        :param pulumi.Input[str] region: The region the database lives in.
        :param pulumi.Input[bool] require_approval_for_deploy: Whether an approval is required to deploy schema changes to this database.
        :param pulumi.Input[bool] restrict_branch_region: Whether to restrict branch creation to one region.
        """
        pulumi.set(__self__, "organization", organization)
        if allow_data_branching is not None:
            pulumi.set(__self__, "allow_data_branching", allow_data_branching)
        if automatic_migrations is not None:
            pulumi.set(__self__, "automatic_migrations", automatic_migrations)
        if cluster_size is not None:
            pulumi.set(__self__, "cluster_size", cluster_size)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if insights_raw_queries is not None:
            pulumi.set(__self__, "insights_raw_queries", insights_raw_queries)
        if issues_count is not None:
            pulumi.set(__self__, "issues_count", issues_count)
        if migration_framework is not None:
            pulumi.set(__self__, "migration_framework", migration_framework)
        if migration_table_name is not None:
            pulumi.set(__self__, "migration_table_name", migration_table_name)
        if multiple_admins_required_for_deletion is not None:
            pulumi.set(__self__, "multiple_admins_required_for_deletion", multiple_admins_required_for_deletion)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if production_branch_web_console is not None:
            pulumi.set(__self__, "production_branch_web_console", production_branch_web_console)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if require_approval_for_deploy is not None:
            pulumi.set(__self__, "require_approval_for_deploy", require_approval_for_deploy)
        if restrict_branch_region is not None:
            pulumi.set(__self__, "restrict_branch_region", restrict_branch_region)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The organization this database belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="allowDataBranching")
    def allow_data_branching(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether seeding branches with data is enabled for all branches.
        """
        return pulumi.get(self, "allow_data_branching")

    @allow_data_branching.setter
    def allow_data_branching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_data_branching", value)

    @property
    @pulumi.getter(name="automaticMigrations")
    def automatic_migrations(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically manage Rails migrations during deploy requests.
        """
        return pulumi.get(self, "automatic_migrations")

    @automatic_migrations.setter
    def automatic_migrations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_migrations", value)

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the database cluster plan.
        """
        return pulumi.get(self, "cluster_size")

    @cluster_size.setter
    def cluster_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_size", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch for the database.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="insightsRawQueries")
    def insights_raw_queries(self) -> Optional[pulumi.Input[bool]]:
        """
        The URL to see this database's branches in the web UI.
        """
        return pulumi.get(self, "insights_raw_queries")

    @insights_raw_queries.setter
    def insights_raw_queries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insights_raw_queries", value)

    @property
    @pulumi.getter(name="issuesCount")
    def issues_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of ongoing issues within a database.
        """
        return pulumi.get(self, "issues_count")

    @issues_count.setter
    def issues_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "issues_count", value)

    @property
    @pulumi.getter(name="migrationFramework")
    def migration_framework(self) -> Optional[pulumi.Input[str]]:
        """
        Framework used for applying migrations.
        """
        return pulumi.get(self, "migration_framework")

    @migration_framework.setter
    def migration_framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_framework", value)

    @property
    @pulumi.getter(name="migrationTableName")
    def migration_table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table name to use for copying schema migration data.
        """
        return pulumi.get(self, "migration_table_name")

    @migration_table_name.setter
    def migration_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_table_name", value)

    @property
    @pulumi.getter(name="multipleAdminsRequiredForDeletion")
    def multiple_admins_required_for_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database requires multiple admins for deletion.
        """
        return pulumi.get(self, "multiple_admins_required_for_deletion")

    @multiple_admins_required_for_deletion.setter
    def multiple_admins_required_for_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple_admins_required_for_deletion", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        """
        The database plan.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="productionBranchWebConsole")
    def production_branch_web_console(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether web console is enabled for production branches.
        """
        return pulumi.get(self, "production_branch_web_console")

    @production_branch_web_console.setter
    def production_branch_web_console(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production_branch_web_console", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region the database lives in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="requireApprovalForDeploy")
    def require_approval_for_deploy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether an approval is required to deploy schema changes to this database.
        """
        return pulumi.get(self, "require_approval_for_deploy")

    @require_approval_for_deploy.setter
    def require_approval_for_deploy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_approval_for_deploy", value)

    @property
    @pulumi.getter(name="restrictBranchRegion")
    def restrict_branch_region(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to restrict branch creation to one region.
        """
        return pulumi.get(self, "restrict_branch_region")

    @restrict_branch_region.setter
    def restrict_branch_region(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_branch_region", value)


@pulumi.input_type
class _DatabaseState:
    def __init__(__self__, *,
                 allow_data_branching: Optional[pulumi.Input[bool]] = None,
                 at_backup_restore_branches_limit: Optional[pulumi.Input[bool]] = None,
                 at_development_branch_limit: Optional[pulumi.Input[bool]] = None,
                 automatic_migrations: Optional[pulumi.Input[bool]] = None,
                 branches_count: Optional[pulumi.Input[float]] = None,
                 branches_url: Optional[pulumi.Input[str]] = None,
                 cluster_size: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 data_import: Optional[pulumi.Input['DatabaseDataImportArgs']] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 default_branch_read_only_regions_count: Optional[pulumi.Input[float]] = None,
                 default_branch_shard_count: Optional[pulumi.Input[float]] = None,
                 default_branch_table_count: Optional[pulumi.Input[float]] = None,
                 development_branches_count: Optional[pulumi.Input[float]] = None,
                 html_url: Optional[pulumi.Input[str]] = None,
                 insights_raw_queries: Optional[pulumi.Input[bool]] = None,
                 issues_count: Optional[pulumi.Input[float]] = None,
                 migration_framework: Optional[pulumi.Input[str]] = None,
                 migration_table_name: Optional[pulumi.Input[str]] = None,
                 multiple_admins_required_for_deletion: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 production_branch_web_console: Optional[pulumi.Input[bool]] = None,
                 production_branches_count: Optional[pulumi.Input[float]] = None,
                 ready: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 require_approval_for_deploy: Optional[pulumi.Input[bool]] = None,
                 restrict_branch_region: Optional[pulumi.Input[bool]] = None,
                 schema_last_updated_at: Optional[pulumi.Input[str]] = None,
                 sharded: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Database resources.
        :param pulumi.Input[bool] allow_data_branching: Whether seeding branches with data is enabled for all branches.
        :param pulumi.Input[bool] at_backup_restore_branches_limit: If the database has reached its backup restored branch limit.
        :param pulumi.Input[bool] at_development_branch_limit: If the database has reached its development branch limit.
        :param pulumi.Input[bool] automatic_migrations: Whether to automatically manage Rails migrations during deploy requests.
        :param pulumi.Input[float] branches_count: The total number of database branches.
        :param pulumi.Input[str] branches_url: The URL to retrieve this database's branches via the API.
        :param pulumi.Input[str] cluster_size: The size of the database cluster plan.
        :param pulumi.Input[str] created_at: When the database was created.
        :param pulumi.Input['DatabaseDataImportArgs'] data_import: If the database was created from an import, describes the import process.
        :param pulumi.Input[str] default_branch: The default branch for the database.
        :param pulumi.Input[float] default_branch_read_only_regions_count: Number of read only regions in the default branch.
        :param pulumi.Input[float] default_branch_shard_count: Number of shards in the default branch.
        :param pulumi.Input[float] default_branch_table_count: Number of tables in the default branch schema.
        :param pulumi.Input[float] development_branches_count: The total number of database development branches.
        :param pulumi.Input[str] html_url: The total number of database development branches.
        :param pulumi.Input[bool] insights_raw_queries: The URL to see this database's branches in the web UI.
        :param pulumi.Input[float] issues_count: The total number of ongoing issues within a database.
        :param pulumi.Input[str] migration_framework: Framework used for applying migrations.
        :param pulumi.Input[str] migration_table_name: Table name to use for copying schema migration data.
        :param pulumi.Input[bool] multiple_admins_required_for_deletion: If the database requires multiple admins for deletion.
        :param pulumi.Input[str] name: The name of this database.
        :param pulumi.Input[str] organization: The organization this database belongs to.
        :param pulumi.Input[str] plan: The database plan.
        :param pulumi.Input[bool] production_branch_web_console: Whether web console is enabled for production branches.
        :param pulumi.Input[float] production_branches_count: The total number of database production branches.
        :param pulumi.Input[bool] ready: If the database is ready to be used.
        :param pulumi.Input[str] region: The region the database lives in.
        :param pulumi.Input[bool] require_approval_for_deploy: Whether an approval is required to deploy schema changes to this database.
        :param pulumi.Input[bool] restrict_branch_region: Whether to restrict branch creation to one region.
        :param pulumi.Input[str] schema_last_updated_at: When the default branch schema was last changed.
        :param pulumi.Input[bool] sharded: If the database is sharded.
        :param pulumi.Input[str] state: State of the database.
        :param pulumi.Input[str] updated_at: When the database was last updated.
        :param pulumi.Input[str] url: The URL to the database API endpoint.
        """
        if allow_data_branching is not None:
            pulumi.set(__self__, "allow_data_branching", allow_data_branching)
        if at_backup_restore_branches_limit is not None:
            pulumi.set(__self__, "at_backup_restore_branches_limit", at_backup_restore_branches_limit)
        if at_development_branch_limit is not None:
            pulumi.set(__self__, "at_development_branch_limit", at_development_branch_limit)
        if automatic_migrations is not None:
            pulumi.set(__self__, "automatic_migrations", automatic_migrations)
        if branches_count is not None:
            pulumi.set(__self__, "branches_count", branches_count)
        if branches_url is not None:
            pulumi.set(__self__, "branches_url", branches_url)
        if cluster_size is not None:
            pulumi.set(__self__, "cluster_size", cluster_size)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_import is not None:
            pulumi.set(__self__, "data_import", data_import)
        if default_branch is not None:
            pulumi.set(__self__, "default_branch", default_branch)
        if default_branch_read_only_regions_count is not None:
            pulumi.set(__self__, "default_branch_read_only_regions_count", default_branch_read_only_regions_count)
        if default_branch_shard_count is not None:
            pulumi.set(__self__, "default_branch_shard_count", default_branch_shard_count)
        if default_branch_table_count is not None:
            pulumi.set(__self__, "default_branch_table_count", default_branch_table_count)
        if development_branches_count is not None:
            pulumi.set(__self__, "development_branches_count", development_branches_count)
        if html_url is not None:
            pulumi.set(__self__, "html_url", html_url)
        if insights_raw_queries is not None:
            pulumi.set(__self__, "insights_raw_queries", insights_raw_queries)
        if issues_count is not None:
            pulumi.set(__self__, "issues_count", issues_count)
        if migration_framework is not None:
            pulumi.set(__self__, "migration_framework", migration_framework)
        if migration_table_name is not None:
            pulumi.set(__self__, "migration_table_name", migration_table_name)
        if multiple_admins_required_for_deletion is not None:
            pulumi.set(__self__, "multiple_admins_required_for_deletion", multiple_admins_required_for_deletion)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if production_branch_web_console is not None:
            pulumi.set(__self__, "production_branch_web_console", production_branch_web_console)
        if production_branches_count is not None:
            pulumi.set(__self__, "production_branches_count", production_branches_count)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if require_approval_for_deploy is not None:
            pulumi.set(__self__, "require_approval_for_deploy", require_approval_for_deploy)
        if restrict_branch_region is not None:
            pulumi.set(__self__, "restrict_branch_region", restrict_branch_region)
        if schema_last_updated_at is not None:
            pulumi.set(__self__, "schema_last_updated_at", schema_last_updated_at)
        if sharded is not None:
            pulumi.set(__self__, "sharded", sharded)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowDataBranching")
    def allow_data_branching(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether seeding branches with data is enabled for all branches.
        """
        return pulumi.get(self, "allow_data_branching")

    @allow_data_branching.setter
    def allow_data_branching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_data_branching", value)

    @property
    @pulumi.getter(name="atBackupRestoreBranchesLimit")
    def at_backup_restore_branches_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database has reached its backup restored branch limit.
        """
        return pulumi.get(self, "at_backup_restore_branches_limit")

    @at_backup_restore_branches_limit.setter
    def at_backup_restore_branches_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "at_backup_restore_branches_limit", value)

    @property
    @pulumi.getter(name="atDevelopmentBranchLimit")
    def at_development_branch_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database has reached its development branch limit.
        """
        return pulumi.get(self, "at_development_branch_limit")

    @at_development_branch_limit.setter
    def at_development_branch_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "at_development_branch_limit", value)

    @property
    @pulumi.getter(name="automaticMigrations")
    def automatic_migrations(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically manage Rails migrations during deploy requests.
        """
        return pulumi.get(self, "automatic_migrations")

    @automatic_migrations.setter
    def automatic_migrations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_migrations", value)

    @property
    @pulumi.getter(name="branchesCount")
    def branches_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of database branches.
        """
        return pulumi.get(self, "branches_count")

    @branches_count.setter
    def branches_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "branches_count", value)

    @property
    @pulumi.getter(name="branchesUrl")
    def branches_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to retrieve this database's branches via the API.
        """
        return pulumi.get(self, "branches_url")

    @branches_url.setter
    def branches_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branches_url", value)

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the database cluster plan.
        """
        return pulumi.get(self, "cluster_size")

    @cluster_size.setter
    def cluster_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_size", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the database was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataImport")
    def data_import(self) -> Optional[pulumi.Input['DatabaseDataImportArgs']]:
        """
        If the database was created from an import, describes the import process.
        """
        return pulumi.get(self, "data_import")

    @data_import.setter
    def data_import(self, value: Optional[pulumi.Input['DatabaseDataImportArgs']]):
        pulumi.set(self, "data_import", value)

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The default branch for the database.
        """
        return pulumi.get(self, "default_branch")

    @default_branch.setter
    def default_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_branch", value)

    @property
    @pulumi.getter(name="defaultBranchReadOnlyRegionsCount")
    def default_branch_read_only_regions_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of read only regions in the default branch.
        """
        return pulumi.get(self, "default_branch_read_only_regions_count")

    @default_branch_read_only_regions_count.setter
    def default_branch_read_only_regions_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_branch_read_only_regions_count", value)

    @property
    @pulumi.getter(name="defaultBranchShardCount")
    def default_branch_shard_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of shards in the default branch.
        """
        return pulumi.get(self, "default_branch_shard_count")

    @default_branch_shard_count.setter
    def default_branch_shard_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_branch_shard_count", value)

    @property
    @pulumi.getter(name="defaultBranchTableCount")
    def default_branch_table_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of tables in the default branch schema.
        """
        return pulumi.get(self, "default_branch_table_count")

    @default_branch_table_count.setter
    def default_branch_table_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "default_branch_table_count", value)

    @property
    @pulumi.getter(name="developmentBranchesCount")
    def development_branches_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "development_branches_count")

    @development_branches_count.setter
    def development_branches_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "development_branches_count", value)

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> Optional[pulumi.Input[str]]:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "html_url")

    @html_url.setter
    def html_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_url", value)

    @property
    @pulumi.getter(name="insightsRawQueries")
    def insights_raw_queries(self) -> Optional[pulumi.Input[bool]]:
        """
        The URL to see this database's branches in the web UI.
        """
        return pulumi.get(self, "insights_raw_queries")

    @insights_raw_queries.setter
    def insights_raw_queries(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insights_raw_queries", value)

    @property
    @pulumi.getter(name="issuesCount")
    def issues_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of ongoing issues within a database.
        """
        return pulumi.get(self, "issues_count")

    @issues_count.setter
    def issues_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "issues_count", value)

    @property
    @pulumi.getter(name="migrationFramework")
    def migration_framework(self) -> Optional[pulumi.Input[str]]:
        """
        Framework used for applying migrations.
        """
        return pulumi.get(self, "migration_framework")

    @migration_framework.setter
    def migration_framework(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_framework", value)

    @property
    @pulumi.getter(name="migrationTableName")
    def migration_table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table name to use for copying schema migration data.
        """
        return pulumi.get(self, "migration_table_name")

    @migration_table_name.setter
    def migration_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migration_table_name", value)

    @property
    @pulumi.getter(name="multipleAdminsRequiredForDeletion")
    def multiple_admins_required_for_deletion(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database requires multiple admins for deletion.
        """
        return pulumi.get(self, "multiple_admins_required_for_deletion")

    @multiple_admins_required_for_deletion.setter
    def multiple_admins_required_for_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multiple_admins_required_for_deletion", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The organization this database belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        """
        The database plan.
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="productionBranchWebConsole")
    def production_branch_web_console(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether web console is enabled for production branches.
        """
        return pulumi.get(self, "production_branch_web_console")

    @production_branch_web_console.setter
    def production_branch_web_console(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production_branch_web_console", value)

    @property
    @pulumi.getter(name="productionBranchesCount")
    def production_branches_count(self) -> Optional[pulumi.Input[float]]:
        """
        The total number of database production branches.
        """
        return pulumi.get(self, "production_branches_count")

    @production_branches_count.setter
    def production_branches_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "production_branches_count", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database is ready to be used.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region the database lives in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="requireApprovalForDeploy")
    def require_approval_for_deploy(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether an approval is required to deploy schema changes to this database.
        """
        return pulumi.get(self, "require_approval_for_deploy")

    @require_approval_for_deploy.setter
    def require_approval_for_deploy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_approval_for_deploy", value)

    @property
    @pulumi.getter(name="restrictBranchRegion")
    def restrict_branch_region(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to restrict branch creation to one region.
        """
        return pulumi.get(self, "restrict_branch_region")

    @restrict_branch_region.setter
    def restrict_branch_region(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restrict_branch_region", value)

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the default branch schema was last changed.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @schema_last_updated_at.setter
    def schema_last_updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_last_updated_at", value)

    @property
    @pulumi.getter
    def sharded(self) -> Optional[pulumi.Input[bool]]:
        """
        If the database is sharded.
        """
        return pulumi.get(self, "sharded")

    @sharded.setter
    def sharded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sharded", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the database.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the database was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to the database API endpoint.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Database(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_data_branching: Optional[pulumi.Input[bool]] = None,
                 automatic_migrations: Optional[pulumi.Input[bool]] = None,
                 cluster_size: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 insights_raw_queries: Optional[pulumi.Input[bool]] = None,
                 issues_count: Optional[pulumi.Input[float]] = None,
                 migration_framework: Optional[pulumi.Input[str]] = None,
                 migration_table_name: Optional[pulumi.Input[str]] = None,
                 multiple_admins_required_for_deletion: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 production_branch_web_console: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 require_approval_for_deploy: Optional[pulumi.Input[bool]] = None,
                 restrict_branch_region: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        A PlanetScale database.

        Known limitations:
        - When the provider is configured with a service token, the service token needs to manually be granted permission on this database resource. This can be done in the UI or via the CLI (`pscale service-token add-access`).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_planetscale as planetscale

        example = planetscale.Database("example",
            organization="example",
            name="anotherdb")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_data_branching: Whether seeding branches with data is enabled for all branches.
        :param pulumi.Input[bool] automatic_migrations: Whether to automatically manage Rails migrations during deploy requests.
        :param pulumi.Input[str] cluster_size: The size of the database cluster plan.
        :param pulumi.Input[str] default_branch: The default branch for the database.
        :param pulumi.Input[bool] insights_raw_queries: The URL to see this database's branches in the web UI.
        :param pulumi.Input[float] issues_count: The total number of ongoing issues within a database.
        :param pulumi.Input[str] migration_framework: Framework used for applying migrations.
        :param pulumi.Input[str] migration_table_name: Table name to use for copying schema migration data.
        :param pulumi.Input[bool] multiple_admins_required_for_deletion: If the database requires multiple admins for deletion.
        :param pulumi.Input[str] name: The name of this database.
        :param pulumi.Input[str] organization: The organization this database belongs to.
        :param pulumi.Input[str] plan: The database plan.
        :param pulumi.Input[bool] production_branch_web_console: Whether web console is enabled for production branches.
        :param pulumi.Input[str] region: The region the database lives in.
        :param pulumi.Input[bool] require_approval_for_deploy: Whether an approval is required to deploy schema changes to this database.
        :param pulumi.Input[bool] restrict_branch_region: Whether to restrict branch creation to one region.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A PlanetScale database.

        Known limitations:
        - When the provider is configured with a service token, the service token needs to manually be granted permission on this database resource. This can be done in the UI or via the CLI (`pscale service-token add-access`).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_planetscale as planetscale

        example = planetscale.Database("example",
            organization="example",
            name="anotherdb")
        ```

        :param str resource_name: The name of the resource.
        :param DatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_data_branching: Optional[pulumi.Input[bool]] = None,
                 automatic_migrations: Optional[pulumi.Input[bool]] = None,
                 cluster_size: Optional[pulumi.Input[str]] = None,
                 default_branch: Optional[pulumi.Input[str]] = None,
                 insights_raw_queries: Optional[pulumi.Input[bool]] = None,
                 issues_count: Optional[pulumi.Input[float]] = None,
                 migration_framework: Optional[pulumi.Input[str]] = None,
                 migration_table_name: Optional[pulumi.Input[str]] = None,
                 multiple_admins_required_for_deletion: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 production_branch_web_console: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 require_approval_for_deploy: Optional[pulumi.Input[bool]] = None,
                 restrict_branch_region: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseArgs.__new__(DatabaseArgs)

            __props__.__dict__["allow_data_branching"] = allow_data_branching
            __props__.__dict__["automatic_migrations"] = automatic_migrations
            __props__.__dict__["cluster_size"] = cluster_size
            __props__.__dict__["default_branch"] = default_branch
            __props__.__dict__["insights_raw_queries"] = insights_raw_queries
            __props__.__dict__["issues_count"] = issues_count
            __props__.__dict__["migration_framework"] = migration_framework
            __props__.__dict__["migration_table_name"] = migration_table_name
            __props__.__dict__["multiple_admins_required_for_deletion"] = multiple_admins_required_for_deletion
            __props__.__dict__["name"] = name
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            __props__.__dict__["plan"] = plan
            __props__.__dict__["production_branch_web_console"] = production_branch_web_console
            __props__.__dict__["region"] = region
            __props__.__dict__["require_approval_for_deploy"] = require_approval_for_deploy
            __props__.__dict__["restrict_branch_region"] = restrict_branch_region
            __props__.__dict__["at_backup_restore_branches_limit"] = None
            __props__.__dict__["at_development_branch_limit"] = None
            __props__.__dict__["branches_count"] = None
            __props__.__dict__["branches_url"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["data_import"] = None
            __props__.__dict__["default_branch_read_only_regions_count"] = None
            __props__.__dict__["default_branch_shard_count"] = None
            __props__.__dict__["default_branch_table_count"] = None
            __props__.__dict__["development_branches_count"] = None
            __props__.__dict__["html_url"] = None
            __props__.__dict__["production_branches_count"] = None
            __props__.__dict__["ready"] = None
            __props__.__dict__["schema_last_updated_at"] = None
            __props__.__dict__["sharded"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["url"] = None
        super(Database, __self__).__init__(
            'planetscale:index/database:Database',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_data_branching: Optional[pulumi.Input[bool]] = None,
            at_backup_restore_branches_limit: Optional[pulumi.Input[bool]] = None,
            at_development_branch_limit: Optional[pulumi.Input[bool]] = None,
            automatic_migrations: Optional[pulumi.Input[bool]] = None,
            branches_count: Optional[pulumi.Input[float]] = None,
            branches_url: Optional[pulumi.Input[str]] = None,
            cluster_size: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            data_import: Optional[pulumi.Input[Union['DatabaseDataImportArgs', 'DatabaseDataImportArgsDict']]] = None,
            default_branch: Optional[pulumi.Input[str]] = None,
            default_branch_read_only_regions_count: Optional[pulumi.Input[float]] = None,
            default_branch_shard_count: Optional[pulumi.Input[float]] = None,
            default_branch_table_count: Optional[pulumi.Input[float]] = None,
            development_branches_count: Optional[pulumi.Input[float]] = None,
            html_url: Optional[pulumi.Input[str]] = None,
            insights_raw_queries: Optional[pulumi.Input[bool]] = None,
            issues_count: Optional[pulumi.Input[float]] = None,
            migration_framework: Optional[pulumi.Input[str]] = None,
            migration_table_name: Optional[pulumi.Input[str]] = None,
            multiple_admins_required_for_deletion: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            plan: Optional[pulumi.Input[str]] = None,
            production_branch_web_console: Optional[pulumi.Input[bool]] = None,
            production_branches_count: Optional[pulumi.Input[float]] = None,
            ready: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[str]] = None,
            require_approval_for_deploy: Optional[pulumi.Input[bool]] = None,
            restrict_branch_region: Optional[pulumi.Input[bool]] = None,
            schema_last_updated_at: Optional[pulumi.Input[str]] = None,
            sharded: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Database':
        """
        Get an existing Database resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_data_branching: Whether seeding branches with data is enabled for all branches.
        :param pulumi.Input[bool] at_backup_restore_branches_limit: If the database has reached its backup restored branch limit.
        :param pulumi.Input[bool] at_development_branch_limit: If the database has reached its development branch limit.
        :param pulumi.Input[bool] automatic_migrations: Whether to automatically manage Rails migrations during deploy requests.
        :param pulumi.Input[float] branches_count: The total number of database branches.
        :param pulumi.Input[str] branches_url: The URL to retrieve this database's branches via the API.
        :param pulumi.Input[str] cluster_size: The size of the database cluster plan.
        :param pulumi.Input[str] created_at: When the database was created.
        :param pulumi.Input[Union['DatabaseDataImportArgs', 'DatabaseDataImportArgsDict']] data_import: If the database was created from an import, describes the import process.
        :param pulumi.Input[str] default_branch: The default branch for the database.
        :param pulumi.Input[float] default_branch_read_only_regions_count: Number of read only regions in the default branch.
        :param pulumi.Input[float] default_branch_shard_count: Number of shards in the default branch.
        :param pulumi.Input[float] default_branch_table_count: Number of tables in the default branch schema.
        :param pulumi.Input[float] development_branches_count: The total number of database development branches.
        :param pulumi.Input[str] html_url: The total number of database development branches.
        :param pulumi.Input[bool] insights_raw_queries: The URL to see this database's branches in the web UI.
        :param pulumi.Input[float] issues_count: The total number of ongoing issues within a database.
        :param pulumi.Input[str] migration_framework: Framework used for applying migrations.
        :param pulumi.Input[str] migration_table_name: Table name to use for copying schema migration data.
        :param pulumi.Input[bool] multiple_admins_required_for_deletion: If the database requires multiple admins for deletion.
        :param pulumi.Input[str] name: The name of this database.
        :param pulumi.Input[str] organization: The organization this database belongs to.
        :param pulumi.Input[str] plan: The database plan.
        :param pulumi.Input[bool] production_branch_web_console: Whether web console is enabled for production branches.
        :param pulumi.Input[float] production_branches_count: The total number of database production branches.
        :param pulumi.Input[bool] ready: If the database is ready to be used.
        :param pulumi.Input[str] region: The region the database lives in.
        :param pulumi.Input[bool] require_approval_for_deploy: Whether an approval is required to deploy schema changes to this database.
        :param pulumi.Input[bool] restrict_branch_region: Whether to restrict branch creation to one region.
        :param pulumi.Input[str] schema_last_updated_at: When the default branch schema was last changed.
        :param pulumi.Input[bool] sharded: If the database is sharded.
        :param pulumi.Input[str] state: State of the database.
        :param pulumi.Input[str] updated_at: When the database was last updated.
        :param pulumi.Input[str] url: The URL to the database API endpoint.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatabaseState.__new__(_DatabaseState)

        __props__.__dict__["allow_data_branching"] = allow_data_branching
        __props__.__dict__["at_backup_restore_branches_limit"] = at_backup_restore_branches_limit
        __props__.__dict__["at_development_branch_limit"] = at_development_branch_limit
        __props__.__dict__["automatic_migrations"] = automatic_migrations
        __props__.__dict__["branches_count"] = branches_count
        __props__.__dict__["branches_url"] = branches_url
        __props__.__dict__["cluster_size"] = cluster_size
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_import"] = data_import
        __props__.__dict__["default_branch"] = default_branch
        __props__.__dict__["default_branch_read_only_regions_count"] = default_branch_read_only_regions_count
        __props__.__dict__["default_branch_shard_count"] = default_branch_shard_count
        __props__.__dict__["default_branch_table_count"] = default_branch_table_count
        __props__.__dict__["development_branches_count"] = development_branches_count
        __props__.__dict__["html_url"] = html_url
        __props__.__dict__["insights_raw_queries"] = insights_raw_queries
        __props__.__dict__["issues_count"] = issues_count
        __props__.__dict__["migration_framework"] = migration_framework
        __props__.__dict__["migration_table_name"] = migration_table_name
        __props__.__dict__["multiple_admins_required_for_deletion"] = multiple_admins_required_for_deletion
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["plan"] = plan
        __props__.__dict__["production_branch_web_console"] = production_branch_web_console
        __props__.__dict__["production_branches_count"] = production_branches_count
        __props__.__dict__["ready"] = ready
        __props__.__dict__["region"] = region
        __props__.__dict__["require_approval_for_deploy"] = require_approval_for_deploy
        __props__.__dict__["restrict_branch_region"] = restrict_branch_region
        __props__.__dict__["schema_last_updated_at"] = schema_last_updated_at
        __props__.__dict__["sharded"] = sharded
        __props__.__dict__["state"] = state
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["url"] = url
        return Database(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowDataBranching")
    def allow_data_branching(self) -> pulumi.Output[bool]:
        """
        Whether seeding branches with data is enabled for all branches.
        """
        return pulumi.get(self, "allow_data_branching")

    @property
    @pulumi.getter(name="atBackupRestoreBranchesLimit")
    def at_backup_restore_branches_limit(self) -> pulumi.Output[bool]:
        """
        If the database has reached its backup restored branch limit.
        """
        return pulumi.get(self, "at_backup_restore_branches_limit")

    @property
    @pulumi.getter(name="atDevelopmentBranchLimit")
    def at_development_branch_limit(self) -> pulumi.Output[bool]:
        """
        If the database has reached its development branch limit.
        """
        return pulumi.get(self, "at_development_branch_limit")

    @property
    @pulumi.getter(name="automaticMigrations")
    def automatic_migrations(self) -> pulumi.Output[bool]:
        """
        Whether to automatically manage Rails migrations during deploy requests.
        """
        return pulumi.get(self, "automatic_migrations")

    @property
    @pulumi.getter(name="branchesCount")
    def branches_count(self) -> pulumi.Output[float]:
        """
        The total number of database branches.
        """
        return pulumi.get(self, "branches_count")

    @property
    @pulumi.getter(name="branchesUrl")
    def branches_url(self) -> pulumi.Output[str]:
        """
        The URL to retrieve this database's branches via the API.
        """
        return pulumi.get(self, "branches_url")

    @property
    @pulumi.getter(name="clusterSize")
    def cluster_size(self) -> pulumi.Output[str]:
        """
        The size of the database cluster plan.
        """
        return pulumi.get(self, "cluster_size")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        When the database was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataImport")
    def data_import(self) -> pulumi.Output['outputs.DatabaseDataImport']:
        """
        If the database was created from an import, describes the import process.
        """
        return pulumi.get(self, "data_import")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> pulumi.Output[str]:
        """
        The default branch for the database.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="defaultBranchReadOnlyRegionsCount")
    def default_branch_read_only_regions_count(self) -> pulumi.Output[float]:
        """
        Number of read only regions in the default branch.
        """
        return pulumi.get(self, "default_branch_read_only_regions_count")

    @property
    @pulumi.getter(name="defaultBranchShardCount")
    def default_branch_shard_count(self) -> pulumi.Output[float]:
        """
        Number of shards in the default branch.
        """
        return pulumi.get(self, "default_branch_shard_count")

    @property
    @pulumi.getter(name="defaultBranchTableCount")
    def default_branch_table_count(self) -> pulumi.Output[float]:
        """
        Number of tables in the default branch schema.
        """
        return pulumi.get(self, "default_branch_table_count")

    @property
    @pulumi.getter(name="developmentBranchesCount")
    def development_branches_count(self) -> pulumi.Output[float]:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "development_branches_count")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> pulumi.Output[str]:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter(name="insightsRawQueries")
    def insights_raw_queries(self) -> pulumi.Output[bool]:
        """
        The URL to see this database's branches in the web UI.
        """
        return pulumi.get(self, "insights_raw_queries")

    @property
    @pulumi.getter(name="issuesCount")
    def issues_count(self) -> pulumi.Output[float]:
        """
        The total number of ongoing issues within a database.
        """
        return pulumi.get(self, "issues_count")

    @property
    @pulumi.getter(name="migrationFramework")
    def migration_framework(self) -> pulumi.Output[str]:
        """
        Framework used for applying migrations.
        """
        return pulumi.get(self, "migration_framework")

    @property
    @pulumi.getter(name="migrationTableName")
    def migration_table_name(self) -> pulumi.Output[str]:
        """
        Table name to use for copying schema migration data.
        """
        return pulumi.get(self, "migration_table_name")

    @property
    @pulumi.getter(name="multipleAdminsRequiredForDeletion")
    def multiple_admins_required_for_deletion(self) -> pulumi.Output[bool]:
        """
        If the database requires multiple admins for deletion.
        """
        return pulumi.get(self, "multiple_admins_required_for_deletion")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The organization this database belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Output[str]:
        """
        The database plan.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="productionBranchWebConsole")
    def production_branch_web_console(self) -> pulumi.Output[bool]:
        """
        Whether web console is enabled for production branches.
        """
        return pulumi.get(self, "production_branch_web_console")

    @property
    @pulumi.getter(name="productionBranchesCount")
    def production_branches_count(self) -> pulumi.Output[float]:
        """
        The total number of database production branches.
        """
        return pulumi.get(self, "production_branches_count")

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Output[bool]:
        """
        If the database is ready to be used.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region the database lives in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requireApprovalForDeploy")
    def require_approval_for_deploy(self) -> pulumi.Output[bool]:
        """
        Whether an approval is required to deploy schema changes to this database.
        """
        return pulumi.get(self, "require_approval_for_deploy")

    @property
    @pulumi.getter(name="restrictBranchRegion")
    def restrict_branch_region(self) -> pulumi.Output[bool]:
        """
        Whether to restrict branch creation to one region.
        """
        return pulumi.get(self, "restrict_branch_region")

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> pulumi.Output[str]:
        """
        When the default branch schema was last changed.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @property
    @pulumi.getter
    def sharded(self) -> pulumi.Output[bool]:
        """
        If the database is sharded.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        When the database was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL to the database API endpoint.
        """
        return pulumi.get(self, "url")

