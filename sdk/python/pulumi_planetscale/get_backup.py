# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBackupResult',
    'AwaitableGetBackupResult',
    'get_backup',
    'get_backup_output',
]

@pulumi.output_type
class GetBackupResult:
    """
    A collection of values returned by getBackup.
    """
    def __init__(__self__, actor=None, backup_policy=None, branch=None, created_at=None, database=None, estimated_storage_cost=None, id=None, name=None, organization=None, required=None, restored_branches=None, size=None, state=None, updated_at=None):
        if actor and not isinstance(actor, dict):
            raise TypeError("Expected argument 'actor' to be a dict")
        pulumi.set(__self__, "actor", actor)
        if backup_policy and not isinstance(backup_policy, dict):
            raise TypeError("Expected argument 'backup_policy' to be a dict")
        pulumi.set(__self__, "backup_policy", backup_policy)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if estimated_storage_cost and not isinstance(estimated_storage_cost, float):
            raise TypeError("Expected argument 'estimated_storage_cost' to be a float")
        pulumi.set(__self__, "estimated_storage_cost", estimated_storage_cost)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if required and not isinstance(required, bool):
            raise TypeError("Expected argument 'required' to be a bool")
        pulumi.set(__self__, "required", required)
        if restored_branches and not isinstance(restored_branches, list):
            raise TypeError("Expected argument 'restored_branches' to be a list")
        pulumi.set(__self__, "restored_branches", restored_branches)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetBackupActorResult':
        """
        The actor that created the backup.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> 'outputs.GetBackupBackupPolicyResult':
        """
        The backup policy being followed.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        The branch this backup belongs to.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the backup was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this backup belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="estimatedStorageCost")
    def estimated_storage_cost(self) -> float:
        """
        The estimated storage cost of the backup.
        """
        return pulumi.get(self, "estimated_storage_cost")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the backup.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this backup belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Whether or not the backup policy is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="restoredBranches")
    def restored_branches(self) -> Sequence[str]:
        """
        Branches that have been restored with this backup.
        """
        return pulumi.get(self, "restored_branches")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        The size of the backup.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the backup.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the backup was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetBackupResult(GetBackupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupResult(
            actor=self.actor,
            backup_policy=self.backup_policy,
            branch=self.branch,
            created_at=self.created_at,
            database=self.database,
            estimated_storage_cost=self.estimated_storage_cost,
            id=self.id,
            name=self.name,
            organization=self.organization,
            required=self.required,
            restored_branches=self.restored_branches,
            size=self.size,
            state=self.state,
            updated_at=self.updated_at)


def get_backup(branch: Optional[str] = None,
               database: Optional[str] = None,
               id: Optional[str] = None,
               organization: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupResult:
    """
    A PlanetScale backup.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_backup(organization="example.com",
        database="example_db",
        branch="main",
        id="k20nb1b7ut18")
    pulumi.export("backup", example)
    ```


    :param str branch: The branch this backup belongs to.
    :param str database: The database this backup belongs to.
    :param str id: The ID of the backup.
    :param str organization: The organization this backup belongs to.
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['id'] = id
    __args__['organization'] = organization
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getBackup:getBackup', __args__, opts=opts, typ=GetBackupResult).value

    return AwaitableGetBackupResult(
        actor=pulumi.get(__ret__, 'actor'),
        backup_policy=pulumi.get(__ret__, 'backup_policy'),
        branch=pulumi.get(__ret__, 'branch'),
        created_at=pulumi.get(__ret__, 'created_at'),
        database=pulumi.get(__ret__, 'database'),
        estimated_storage_cost=pulumi.get(__ret__, 'estimated_storage_cost'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        required=pulumi.get(__ret__, 'required'),
        restored_branches=pulumi.get(__ret__, 'restored_branches'),
        size=pulumi.get(__ret__, 'size'),
        state=pulumi.get(__ret__, 'state'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_backup_output(branch: Optional[pulumi.Input[str]] = None,
                      database: Optional[pulumi.Input[str]] = None,
                      id: Optional[pulumi.Input[str]] = None,
                      organization: Optional[pulumi.Input[str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBackupResult]:
    """
    A PlanetScale backup.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_backup(organization="example.com",
        database="example_db",
        branch="main",
        id="k20nb1b7ut18")
    pulumi.export("backup", example)
    ```


    :param str branch: The branch this backup belongs to.
    :param str database: The database this backup belongs to.
    :param str id: The ID of the backup.
    :param str organization: The organization this backup belongs to.
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['id'] = id
    __args__['organization'] = organization
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getBackup:getBackup', __args__, opts=opts, typ=GetBackupResult)
    return __ret__.apply(lambda __response__: GetBackupResult(
        actor=pulumi.get(__response__, 'actor'),
        backup_policy=pulumi.get(__response__, 'backup_policy'),
        branch=pulumi.get(__response__, 'branch'),
        created_at=pulumi.get(__response__, 'created_at'),
        database=pulumi.get(__response__, 'database'),
        estimated_storage_cost=pulumi.get(__response__, 'estimated_storage_cost'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        required=pulumi.get(__response__, 'required'),
        restored_branches=pulumi.get(__response__, 'restored_branches'),
        size=pulumi.get(__response__, 'size'),
        state=pulumi.get(__response__, 'state'),
        updated_at=pulumi.get(__response__, 'updated_at')))
