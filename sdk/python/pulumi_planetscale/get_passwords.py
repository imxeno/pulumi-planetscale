# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPasswordsResult',
    'AwaitableGetPasswordsResult',
    'get_passwords',
    'get_passwords_output',
]

@pulumi.output_type
class GetPasswordsResult:
    """
    A collection of values returned by getPasswords.
    """
    def __init__(__self__, branch=None, database=None, id=None, organization=None, passwords=None, read_only_region_id=None):
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if passwords and not isinstance(passwords, list):
            raise TypeError("Expected argument 'passwords' to be a list")
        pulumi.set(__self__, "passwords", passwords)
        if read_only_region_id and not isinstance(read_only_region_id, str):
            raise TypeError("Expected argument 'read_only_region_id' to be a str")
        pulumi.set(__self__, "read_only_region_id", read_only_region_id)

    @property
    @pulumi.getter
    def branch(self) -> str:
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def passwords(self) -> Sequence['outputs.GetPasswordsPasswordResult']:
        return pulumi.get(self, "passwords")

    @property
    @pulumi.getter(name="readOnlyRegionId")
    def read_only_region_id(self) -> Optional[str]:
        return pulumi.get(self, "read_only_region_id")


class AwaitableGetPasswordsResult(GetPasswordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPasswordsResult(
            branch=self.branch,
            database=self.database,
            id=self.id,
            organization=self.organization,
            passwords=self.passwords,
            read_only_region_id=self.read_only_region_id)


def get_passwords(branch: Optional[str] = None,
                  database: Optional[str] = None,
                  organization: Optional[str] = None,
                  read_only_region_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPasswordsResult:
    """
    A list of PlanetScale database passwords.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_passwords(organization="example",
        database="example_db",
        branch="main")
    pulumi.export("passwords", example)
    ```
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['organization'] = organization
    __args__['readOnlyRegionId'] = read_only_region_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getPasswords:getPasswords', __args__, opts=opts, typ=GetPasswordsResult).value

    return AwaitableGetPasswordsResult(
        branch=pulumi.get(__ret__, 'branch'),
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        organization=pulumi.get(__ret__, 'organization'),
        passwords=pulumi.get(__ret__, 'passwords'),
        read_only_region_id=pulumi.get(__ret__, 'read_only_region_id'))
def get_passwords_output(branch: Optional[pulumi.Input[str]] = None,
                         database: Optional[pulumi.Input[str]] = None,
                         organization: Optional[pulumi.Input[str]] = None,
                         read_only_region_id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPasswordsResult]:
    """
    A list of PlanetScale database passwords.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_passwords(organization="example",
        database="example_db",
        branch="main")
    pulumi.export("passwords", example)
    ```
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['organization'] = organization
    __args__['readOnlyRegionId'] = read_only_region_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getPasswords:getPasswords', __args__, opts=opts, typ=GetPasswordsResult)
    return __ret__.apply(lambda __response__: GetPasswordsResult(
        branch=pulumi.get(__response__, 'branch'),
        database=pulumi.get(__response__, 'database'),
        id=pulumi.get(__response__, 'id'),
        organization=pulumi.get(__response__, 'organization'),
        passwords=pulumi.get(__response__, 'passwords'),
        read_only_region_id=pulumi.get(__response__, 'read_only_region_id')))
