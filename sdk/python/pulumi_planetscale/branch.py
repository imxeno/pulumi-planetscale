# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BranchArgs', 'Branch']

@pulumi.input_type
class BranchArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 parent_branch: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Branch resource.
        :param pulumi.Input[str] database: The database this branch belongs to.
        :param pulumi.Input[str] organization: The organization this branch belongs to.
        :param pulumi.Input[str] parent_branch: The name of the parent branch from which the branch was created.
        :param pulumi.Input[str] name: The name of the branch.
        :param pulumi.Input[bool] production: Whether or not the branch is a production branch.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "parent_branch", parent_branch)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if production is not None:
            pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The database this branch belongs to.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        """
        The organization this branch belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="parentBranch")
    def parent_branch(self) -> pulumi.Input[str]:
        """
        The name of the parent branch from which the branch was created.
        """
        return pulumi.get(self, "parent_branch")

    @parent_branch.setter
    def parent_branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_branch", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the branch is a production branch.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production", value)


@pulumi.input_type
class _BranchState:
    def __init__(__self__, *,
                 actor: Optional[pulumi.Input['BranchActorArgs']] = None,
                 cluster_rate_name: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 html_url: Optional[pulumi.Input[str]] = None,
                 mysql_address: Optional[pulumi.Input[str]] = None,
                 mysql_edge_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 parent_branch: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[bool]] = None,
                 ready: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input['BranchRegionArgs']] = None,
                 restore_checklist_completed_at: Optional[pulumi.Input[str]] = None,
                 restored_from_branch: Optional[pulumi.Input['BranchRestoredFromBranchArgs']] = None,
                 schema_last_updated_at: Optional[pulumi.Input[str]] = None,
                 shard_count: Optional[pulumi.Input[float]] = None,
                 sharded: Optional[pulumi.Input[bool]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Branch resources.
        :param pulumi.Input['BranchActorArgs'] actor: The actor who created this branch.
        :param pulumi.Input[str] cluster_rate_name: The SKU representing the branch's cluster size.
        :param pulumi.Input[str] created_at: When the branch was created.
        :param pulumi.Input[str] database: The database this branch belongs to.
        :param pulumi.Input[str] html_url: Planetscale app URL for the branch.
        :param pulumi.Input[str] mysql_address: The MySQL address for the branch.
        :param pulumi.Input[str] mysql_edge_address: The address of the MySQL provider for the branch.
        :param pulumi.Input[str] name: The name of the branch.
        :param pulumi.Input[str] organization: The organization this branch belongs to.
        :param pulumi.Input[str] parent_branch: The name of the parent branch from which the branch was created.
        :param pulumi.Input[bool] production: Whether or not the branch is a production branch.
        :param pulumi.Input[bool] ready: Whether or not the branch is ready to serve queries.
        :param pulumi.Input['BranchRegionArgs'] region: The region in which this branch lives.
        :param pulumi.Input[str] restore_checklist_completed_at: When a user last marked a backup restore checklist as completed.
        :param pulumi.Input['BranchRestoredFromBranchArgs'] restored_from_branch: todo
        :param pulumi.Input[str] schema_last_updated_at: When the schema for the branch was last updated.
        :param pulumi.Input[float] shard_count: The number of shards in the branch.
        :param pulumi.Input[bool] sharded: Whether or not the branch is sharded.
        :param pulumi.Input[str] updated_at: When the branch was last updated.
        """
        if actor is not None:
            pulumi.set(__self__, "actor", actor)
        if cluster_rate_name is not None:
            pulumi.set(__self__, "cluster_rate_name", cluster_rate_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if html_url is not None:
            pulumi.set(__self__, "html_url", html_url)
        if mysql_address is not None:
            pulumi.set(__self__, "mysql_address", mysql_address)
        if mysql_edge_address is not None:
            pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if parent_branch is not None:
            pulumi.set(__self__, "parent_branch", parent_branch)
        if production is not None:
            pulumi.set(__self__, "production", production)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if restore_checklist_completed_at is not None:
            pulumi.set(__self__, "restore_checklist_completed_at", restore_checklist_completed_at)
        if restored_from_branch is not None:
            pulumi.set(__self__, "restored_from_branch", restored_from_branch)
        if schema_last_updated_at is not None:
            pulumi.set(__self__, "schema_last_updated_at", schema_last_updated_at)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if sharded is not None:
            pulumi.set(__self__, "sharded", sharded)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actor(self) -> Optional[pulumi.Input['BranchActorArgs']]:
        """
        The actor who created this branch.
        """
        return pulumi.get(self, "actor")

    @actor.setter
    def actor(self, value: Optional[pulumi.Input['BranchActorArgs']]):
        pulumi.set(self, "actor", value)

    @property
    @pulumi.getter(name="clusterRateName")
    def cluster_rate_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SKU representing the branch's cluster size.
        """
        return pulumi.get(self, "cluster_rate_name")

    @cluster_rate_name.setter
    def cluster_rate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_rate_name", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the branch was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        """
        The database this branch belongs to.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> Optional[pulumi.Input[str]]:
        """
        Planetscale app URL for the branch.
        """
        return pulumi.get(self, "html_url")

    @html_url.setter
    def html_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_url", value)

    @property
    @pulumi.getter(name="mysqlAddress")
    def mysql_address(self) -> Optional[pulumi.Input[str]]:
        """
        The MySQL address for the branch.
        """
        return pulumi.get(self, "mysql_address")

    @mysql_address.setter
    def mysql_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_address", value)

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> Optional[pulumi.Input[str]]:
        """
        The address of the MySQL provider for the branch.
        """
        return pulumi.get(self, "mysql_edge_address")

    @mysql_edge_address.setter
    def mysql_edge_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_edge_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[str]]:
        """
        The organization this branch belongs to.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="parentBranch")
    def parent_branch(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the parent branch from which the branch was created.
        """
        return pulumi.get(self, "parent_branch")

    @parent_branch.setter
    def parent_branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_branch", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the branch is a production branch.
        """
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the branch is ready to serve queries.
        """
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input['BranchRegionArgs']]:
        """
        The region in which this branch lives.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input['BranchRegionArgs']]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="restoreChecklistCompletedAt")
    def restore_checklist_completed_at(self) -> Optional[pulumi.Input[str]]:
        """
        When a user last marked a backup restore checklist as completed.
        """
        return pulumi.get(self, "restore_checklist_completed_at")

    @restore_checklist_completed_at.setter
    def restore_checklist_completed_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restore_checklist_completed_at", value)

    @property
    @pulumi.getter(name="restoredFromBranch")
    def restored_from_branch(self) -> Optional[pulumi.Input['BranchRestoredFromBranchArgs']]:
        """
        todo
        """
        return pulumi.get(self, "restored_from_branch")

    @restored_from_branch.setter
    def restored_from_branch(self, value: Optional[pulumi.Input['BranchRestoredFromBranchArgs']]):
        pulumi.set(self, "restored_from_branch", value)

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the schema for the branch was last updated.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @schema_last_updated_at.setter
    def schema_last_updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_last_updated_at", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[float]]:
        """
        The number of shards in the branch.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter
    def sharded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the branch is sharded.
        """
        return pulumi.get(self, "sharded")

    @sharded.setter
    def sharded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sharded", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the branch was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Branch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 parent_branch: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        A PlanetScale branch.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_planetscale as planetscale

        example = planetscale.Branch("example",
            organization="example",
            database="example_db",
            name="antoinewritescode",
            parent_branch="main")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] database: The database this branch belongs to.
        :param pulumi.Input[str] name: The name of the branch.
        :param pulumi.Input[str] organization: The organization this branch belongs to.
        :param pulumi.Input[str] parent_branch: The name of the parent branch from which the branch was created.
        :param pulumi.Input[bool] production: Whether or not the branch is a production branch.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BranchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A PlanetScale branch.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_planetscale as planetscale

        example = planetscale.Branch("example",
            organization="example",
            database="example_db",
            name="antoinewritescode",
            parent_branch="main")
        ```

        :param str resource_name: The name of the resource.
        :param BranchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BranchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 organization: Optional[pulumi.Input[str]] = None,
                 parent_branch: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BranchArgs.__new__(BranchArgs)

            if database is None and not opts.urn:
                raise TypeError("Missing required property 'database'")
            __props__.__dict__["database"] = database
            __props__.__dict__["name"] = name
            if organization is None and not opts.urn:
                raise TypeError("Missing required property 'organization'")
            __props__.__dict__["organization"] = organization
            if parent_branch is None and not opts.urn:
                raise TypeError("Missing required property 'parent_branch'")
            __props__.__dict__["parent_branch"] = parent_branch
            __props__.__dict__["production"] = production
            __props__.__dict__["actor"] = None
            __props__.__dict__["cluster_rate_name"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["html_url"] = None
            __props__.__dict__["mysql_address"] = None
            __props__.__dict__["mysql_edge_address"] = None
            __props__.__dict__["ready"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["restore_checklist_completed_at"] = None
            __props__.__dict__["restored_from_branch"] = None
            __props__.__dict__["schema_last_updated_at"] = None
            __props__.__dict__["shard_count"] = None
            __props__.__dict__["sharded"] = None
            __props__.__dict__["updated_at"] = None
        super(Branch, __self__).__init__(
            'planetscale:index/branch:Branch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actor: Optional[pulumi.Input[Union['BranchActorArgs', 'BranchActorArgsDict']]] = None,
            cluster_rate_name: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            database: Optional[pulumi.Input[str]] = None,
            html_url: Optional[pulumi.Input[str]] = None,
            mysql_address: Optional[pulumi.Input[str]] = None,
            mysql_edge_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            organization: Optional[pulumi.Input[str]] = None,
            parent_branch: Optional[pulumi.Input[str]] = None,
            production: Optional[pulumi.Input[bool]] = None,
            ready: Optional[pulumi.Input[bool]] = None,
            region: Optional[pulumi.Input[Union['BranchRegionArgs', 'BranchRegionArgsDict']]] = None,
            restore_checklist_completed_at: Optional[pulumi.Input[str]] = None,
            restored_from_branch: Optional[pulumi.Input[Union['BranchRestoredFromBranchArgs', 'BranchRestoredFromBranchArgsDict']]] = None,
            schema_last_updated_at: Optional[pulumi.Input[str]] = None,
            shard_count: Optional[pulumi.Input[float]] = None,
            sharded: Optional[pulumi.Input[bool]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Branch':
        """
        Get an existing Branch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BranchActorArgs', 'BranchActorArgsDict']] actor: The actor who created this branch.
        :param pulumi.Input[str] cluster_rate_name: The SKU representing the branch's cluster size.
        :param pulumi.Input[str] created_at: When the branch was created.
        :param pulumi.Input[str] database: The database this branch belongs to.
        :param pulumi.Input[str] html_url: Planetscale app URL for the branch.
        :param pulumi.Input[str] mysql_address: The MySQL address for the branch.
        :param pulumi.Input[str] mysql_edge_address: The address of the MySQL provider for the branch.
        :param pulumi.Input[str] name: The name of the branch.
        :param pulumi.Input[str] organization: The organization this branch belongs to.
        :param pulumi.Input[str] parent_branch: The name of the parent branch from which the branch was created.
        :param pulumi.Input[bool] production: Whether or not the branch is a production branch.
        :param pulumi.Input[bool] ready: Whether or not the branch is ready to serve queries.
        :param pulumi.Input[Union['BranchRegionArgs', 'BranchRegionArgsDict']] region: The region in which this branch lives.
        :param pulumi.Input[str] restore_checklist_completed_at: When a user last marked a backup restore checklist as completed.
        :param pulumi.Input[Union['BranchRestoredFromBranchArgs', 'BranchRestoredFromBranchArgsDict']] restored_from_branch: todo
        :param pulumi.Input[str] schema_last_updated_at: When the schema for the branch was last updated.
        :param pulumi.Input[float] shard_count: The number of shards in the branch.
        :param pulumi.Input[bool] sharded: Whether or not the branch is sharded.
        :param pulumi.Input[str] updated_at: When the branch was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BranchState.__new__(_BranchState)

        __props__.__dict__["actor"] = actor
        __props__.__dict__["cluster_rate_name"] = cluster_rate_name
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["database"] = database
        __props__.__dict__["html_url"] = html_url
        __props__.__dict__["mysql_address"] = mysql_address
        __props__.__dict__["mysql_edge_address"] = mysql_edge_address
        __props__.__dict__["name"] = name
        __props__.__dict__["organization"] = organization
        __props__.__dict__["parent_branch"] = parent_branch
        __props__.__dict__["production"] = production
        __props__.__dict__["ready"] = ready
        __props__.__dict__["region"] = region
        __props__.__dict__["restore_checklist_completed_at"] = restore_checklist_completed_at
        __props__.__dict__["restored_from_branch"] = restored_from_branch
        __props__.__dict__["schema_last_updated_at"] = schema_last_updated_at
        __props__.__dict__["shard_count"] = shard_count
        __props__.__dict__["sharded"] = sharded
        __props__.__dict__["updated_at"] = updated_at
        return Branch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actor(self) -> pulumi.Output['outputs.BranchActor']:
        """
        The actor who created this branch.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="clusterRateName")
    def cluster_rate_name(self) -> pulumi.Output[str]:
        """
        The SKU representing the branch's cluster size.
        """
        return pulumi.get(self, "cluster_rate_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        When the branch was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[str]:
        """
        The database this branch belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> pulumi.Output[str]:
        """
        Planetscale app URL for the branch.
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter(name="mysqlAddress")
    def mysql_address(self) -> pulumi.Output[str]:
        """
        The MySQL address for the branch.
        """
        return pulumi.get(self, "mysql_address")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> pulumi.Output[str]:
        """
        The address of the MySQL provider for the branch.
        """
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Output[str]:
        """
        The organization this branch belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="parentBranch")
    def parent_branch(self) -> pulumi.Output[str]:
        """
        The name of the parent branch from which the branch was created.
        """
        return pulumi.get(self, "parent_branch")

    @property
    @pulumi.getter
    def production(self) -> pulumi.Output[bool]:
        """
        Whether or not the branch is a production branch.
        """
        return pulumi.get(self, "production")

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Output[bool]:
        """
        Whether or not the branch is ready to serve queries.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output['outputs.BranchRegion']:
        """
        The region in which this branch lives.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreChecklistCompletedAt")
    def restore_checklist_completed_at(self) -> pulumi.Output[str]:
        """
        When a user last marked a backup restore checklist as completed.
        """
        return pulumi.get(self, "restore_checklist_completed_at")

    @property
    @pulumi.getter(name="restoredFromBranch")
    def restored_from_branch(self) -> pulumi.Output['outputs.BranchRestoredFromBranch']:
        """
        todo
        """
        return pulumi.get(self, "restored_from_branch")

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> pulumi.Output[str]:
        """
        When the schema for the branch was last updated.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Output[float]:
        """
        The number of shards in the branch.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter
    def sharded(self) -> pulumi.Output[bool]:
        """
        Whether or not the branch is sharded.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        When the branch was last updated.
        """
        return pulumi.get(self, "updated_at")

