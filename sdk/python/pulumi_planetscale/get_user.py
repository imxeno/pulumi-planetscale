# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, avatar_url=None, created_at=None, default_organization=None, directory_managed=None, display_name=None, email=None, email_verified=None, id=None, managed=None, name=None, sso=None, two_factor_auth_configured=None, updated_at=None):
        if avatar_url and not isinstance(avatar_url, str):
            raise TypeError("Expected argument 'avatar_url' to be a str")
        pulumi.set(__self__, "avatar_url", avatar_url)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if default_organization and not isinstance(default_organization, dict):
            raise TypeError("Expected argument 'default_organization' to be a dict")
        pulumi.set(__self__, "default_organization", default_organization)
        if directory_managed and not isinstance(directory_managed, bool):
            raise TypeError("Expected argument 'directory_managed' to be a bool")
        pulumi.set(__self__, "directory_managed", directory_managed)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if email_verified and not isinstance(email_verified, bool):
            raise TypeError("Expected argument 'email_verified' to be a bool")
        pulumi.set(__self__, "email_verified", email_verified)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if managed and not isinstance(managed, bool):
            raise TypeError("Expected argument 'managed' to be a bool")
        pulumi.set(__self__, "managed", managed)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sso and not isinstance(sso, bool):
            raise TypeError("Expected argument 'sso' to be a bool")
        pulumi.set(__self__, "sso", sso)
        if two_factor_auth_configured and not isinstance(two_factor_auth_configured, bool):
            raise TypeError("Expected argument 'two_factor_auth_configured' to be a bool")
        pulumi.set(__self__, "two_factor_auth_configured", two_factor_auth_configured)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL source of the user's avatar.
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the user was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultOrganization")
    def default_organization(self) -> 'outputs.GetUserDefaultOrganizationResult':
        """
        The default organization for the user.
        """
        return pulumi.get(self, "default_organization")

    @property
    @pulumi.getter(name="directoryManaged")
    def directory_managed(self) -> bool:
        """
        Whether or not the user is managed by a WorkOS directory.
        """
        return pulumi.get(self, "directory_managed")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the user.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The email of the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="emailVerified")
    def email_verified(self) -> bool:
        """
        Whether or not the user is verified by email.
        """
        return pulumi.get(self, "email_verified")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def managed(self) -> bool:
        """
        Whether or not the user is managed by an authentication provider.
        """
        return pulumi.get(self, "managed")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sso(self) -> bool:
        """
        Whether or not the user is managed by WorkOS.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="twoFactorAuthConfigured")
    def two_factor_auth_configured(self) -> bool:
        """
        Whether or not the user has configured two factor authentication.
        """
        return pulumi.get(self, "two_factor_auth_configured")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the user was last updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            avatar_url=self.avatar_url,
            created_at=self.created_at,
            default_organization=self.default_organization,
            directory_managed=self.directory_managed,
            display_name=self.display_name,
            email=self.email,
            email_verified=self.email_verified,
            id=self.id,
            managed=self.managed,
            name=self.name,
            sso=self.sso,
            two_factor_auth_configured=self.two_factor_auth_configured,
            updated_at=self.updated_at)


def get_user(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    A PlanetScale user.

    Known limitations:
    - Does not work when the provider is configured with a service token.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    # doesn't work right now for some reason
    example = planetscale.get_user()
    pulumi.export("currentUser", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        avatar_url=pulumi.get(__ret__, 'avatar_url'),
        created_at=pulumi.get(__ret__, 'created_at'),
        default_organization=pulumi.get(__ret__, 'default_organization'),
        directory_managed=pulumi.get(__ret__, 'directory_managed'),
        display_name=pulumi.get(__ret__, 'display_name'),
        email=pulumi.get(__ret__, 'email'),
        email_verified=pulumi.get(__ret__, 'email_verified'),
        id=pulumi.get(__ret__, 'id'),
        managed=pulumi.get(__ret__, 'managed'),
        name=pulumi.get(__ret__, 'name'),
        sso=pulumi.get(__ret__, 'sso'),
        two_factor_auth_configured=pulumi.get(__ret__, 'two_factor_auth_configured'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_user_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    A PlanetScale user.

    Known limitations:
    - Does not work when the provider is configured with a service token.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    # doesn't work right now for some reason
    example = planetscale.get_user()
    pulumi.export("currentUser", example)
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult)
    return __ret__.apply(lambda __response__: GetUserResult(
        avatar_url=pulumi.get(__response__, 'avatar_url'),
        created_at=pulumi.get(__response__, 'created_at'),
        default_organization=pulumi.get(__response__, 'default_organization'),
        directory_managed=pulumi.get(__response__, 'directory_managed'),
        display_name=pulumi.get(__response__, 'display_name'),
        email=pulumi.get(__response__, 'email'),
        email_verified=pulumi.get(__response__, 'email_verified'),
        id=pulumi.get(__response__, 'id'),
        managed=pulumi.get(__response__, 'managed'),
        name=pulumi.get(__response__, 'name'),
        sso=pulumi.get(__response__, 'sso'),
        two_factor_auth_configured=pulumi.get(__response__, 'two_factor_auth_configured'),
        updated_at=pulumi.get(__response__, 'updated_at')))
