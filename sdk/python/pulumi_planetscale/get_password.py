# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPasswordResult',
    'AwaitableGetPasswordResult',
    'get_password',
    'get_password_output',
]

@pulumi.output_type
class GetPasswordResult:
    """
    A collection of values returned by getPassword.
    """
    def __init__(__self__, access_host_url=None, actor=None, branch=None, created_at=None, database=None, database_branch=None, deleted_at=None, expires_at=None, id=None, name=None, organization=None, read_only_region_id=None, region=None, renewable=None, role=None, ttl_seconds=None, username=None):
        if access_host_url and not isinstance(access_host_url, str):
            raise TypeError("Expected argument 'access_host_url' to be a str")
        pulumi.set(__self__, "access_host_url", access_host_url)
        if actor and not isinstance(actor, dict):
            raise TypeError("Expected argument 'actor' to be a dict")
        pulumi.set(__self__, "actor", actor)
        if branch and not isinstance(branch, str):
            raise TypeError("Expected argument 'branch' to be a str")
        pulumi.set(__self__, "branch", branch)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if database_branch and not isinstance(database_branch, dict):
            raise TypeError("Expected argument 'database_branch' to be a dict")
        pulumi.set(__self__, "database_branch", database_branch)
        if deleted_at and not isinstance(deleted_at, str):
            raise TypeError("Expected argument 'deleted_at' to be a str")
        pulumi.set(__self__, "deleted_at", deleted_at)
        if expires_at and not isinstance(expires_at, str):
            raise TypeError("Expected argument 'expires_at' to be a str")
        pulumi.set(__self__, "expires_at", expires_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)
        if read_only_region_id and not isinstance(read_only_region_id, str):
            raise TypeError("Expected argument 'read_only_region_id' to be a str")
        pulumi.set(__self__, "read_only_region_id", read_only_region_id)
        if region and not isinstance(region, dict):
            raise TypeError("Expected argument 'region' to be a dict")
        pulumi.set(__self__, "region", region)
        if renewable and not isinstance(renewable, bool):
            raise TypeError("Expected argument 'renewable' to be a bool")
        pulumi.set(__self__, "renewable", renewable)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if ttl_seconds and not isinstance(ttl_seconds, float):
            raise TypeError("Expected argument 'ttl_seconds' to be a float")
        pulumi.set(__self__, "ttl_seconds", ttl_seconds)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        """
        The host URL for the password.
        """
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetPasswordActorResult':
        """
        The actor that created this branch.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        The branch this password belongs to..
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the password was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this branch password belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseBranch")
    def database_branch(self) -> 'outputs.GetPasswordDatabaseBranchResult':
        """
        The branch this password is allowed to access.
        """
        return pulumi.get(self, "database_branch")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        """
        When the password was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> str:
        """
        When the password will expire.
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the password.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name for the password.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this database branch password belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="readOnlyRegionId")
    def read_only_region_id(self) -> Optional[str]:
        """
        If the password is for a read-only region, the ID of the region.
        """
        return pulumi.get(self, "read_only_region_id")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetPasswordRegionResult':
        """
        The region in which this password can be used.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def renewable(self) -> bool:
        """
        Whether or not the password can be renewed.
        """
        return pulumi.get(self, "renewable")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role for the password.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="ttlSeconds")
    def ttl_seconds(self) -> float:
        """
        Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        """
        return pulumi.get(self, "ttl_seconds")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the password.
        """
        return pulumi.get(self, "username")


class AwaitableGetPasswordResult(GetPasswordResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPasswordResult(
            access_host_url=self.access_host_url,
            actor=self.actor,
            branch=self.branch,
            created_at=self.created_at,
            database=self.database,
            database_branch=self.database_branch,
            deleted_at=self.deleted_at,
            expires_at=self.expires_at,
            id=self.id,
            name=self.name,
            organization=self.organization,
            read_only_region_id=self.read_only_region_id,
            region=self.region,
            renewable=self.renewable,
            role=self.role,
            ttl_seconds=self.ttl_seconds,
            username=self.username)


def get_password(branch: Optional[str] = None,
                 database: Optional[str] = None,
                 id: Optional[str] = None,
                 organization: Optional[str] = None,
                 read_only_region_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPasswordResult:
    """
    A PlanetScale database password.


    :param str branch: The branch this password belongs to..
    :param str database: The database this branch password belongs to.
    :param str id: The ID for the password.
    :param str organization: The organization this database branch password belongs to.
    :param str read_only_region_id: If the password is for a read-only region, the ID of the region.
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['id'] = id
    __args__['organization'] = organization
    __args__['readOnlyRegionId'] = read_only_region_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getPassword:getPassword', __args__, opts=opts, typ=GetPasswordResult).value

    return AwaitableGetPasswordResult(
        access_host_url=pulumi.get(__ret__, 'access_host_url'),
        actor=pulumi.get(__ret__, 'actor'),
        branch=pulumi.get(__ret__, 'branch'),
        created_at=pulumi.get(__ret__, 'created_at'),
        database=pulumi.get(__ret__, 'database'),
        database_branch=pulumi.get(__ret__, 'database_branch'),
        deleted_at=pulumi.get(__ret__, 'deleted_at'),
        expires_at=pulumi.get(__ret__, 'expires_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        organization=pulumi.get(__ret__, 'organization'),
        read_only_region_id=pulumi.get(__ret__, 'read_only_region_id'),
        region=pulumi.get(__ret__, 'region'),
        renewable=pulumi.get(__ret__, 'renewable'),
        role=pulumi.get(__ret__, 'role'),
        ttl_seconds=pulumi.get(__ret__, 'ttl_seconds'),
        username=pulumi.get(__ret__, 'username'))
def get_password_output(branch: Optional[pulumi.Input[str]] = None,
                        database: Optional[pulumi.Input[str]] = None,
                        id: Optional[pulumi.Input[str]] = None,
                        organization: Optional[pulumi.Input[str]] = None,
                        read_only_region_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPasswordResult]:
    """
    A PlanetScale database password.


    :param str branch: The branch this password belongs to..
    :param str database: The database this branch password belongs to.
    :param str id: The ID for the password.
    :param str organization: The organization this database branch password belongs to.
    :param str read_only_region_id: If the password is for a read-only region, the ID of the region.
    """
    __args__ = dict()
    __args__['branch'] = branch
    __args__['database'] = database
    __args__['id'] = id
    __args__['organization'] = organization
    __args__['readOnlyRegionId'] = read_only_region_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getPassword:getPassword', __args__, opts=opts, typ=GetPasswordResult)
    return __ret__.apply(lambda __response__: GetPasswordResult(
        access_host_url=pulumi.get(__response__, 'access_host_url'),
        actor=pulumi.get(__response__, 'actor'),
        branch=pulumi.get(__response__, 'branch'),
        created_at=pulumi.get(__response__, 'created_at'),
        database=pulumi.get(__response__, 'database'),
        database_branch=pulumi.get(__response__, 'database_branch'),
        deleted_at=pulumi.get(__response__, 'deleted_at'),
        expires_at=pulumi.get(__response__, 'expires_at'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        organization=pulumi.get(__response__, 'organization'),
        read_only_region_id=pulumi.get(__response__, 'read_only_region_id'),
        region=pulumi.get(__response__, 'region'),
        renewable=pulumi.get(__response__, 'renewable'),
        role=pulumi.get(__response__, 'role'),
        ttl_seconds=pulumi.get(__response__, 'ttl_seconds'),
        username=pulumi.get(__response__, 'username')))
