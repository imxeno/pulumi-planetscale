# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'BackupActor',
    'BackupBackupPolicy',
    'BranchActor',
    'BranchRegion',
    'BranchRestoredFromBranch',
    'DatabaseDataImport',
    'DatabaseDataImportDataSource',
    'PasswordActor',
    'PasswordDatabaseBranch',
    'PasswordRegion',
    'GetBackupActorResult',
    'GetBackupBackupPolicyResult',
    'GetBackupsBackupResult',
    'GetBackupsBackupActorResult',
    'GetBackupsBackupBackupPolicyResult',
    'GetBranchActorResult',
    'GetBranchRegionResult',
    'GetBranchRestoredFromBranchResult',
    'GetBranchSchemaLintErrorResult',
    'GetBranchSchemaTableResult',
    'GetBranchesBranchResult',
    'GetBranchesBranchActorResult',
    'GetBranchesBranchRegionResult',
    'GetBranchesBranchRestoredFromBranchResult',
    'GetDatabaseDataImportResult',
    'GetDatabaseDataImportDataSourceResult',
    'GetDatabaseReadOnlyRegionsRegionResult',
    'GetDatabaseReadOnlyRegionsRegionActorResult',
    'GetDatabaseReadOnlyRegionsRegionRegionResult',
    'GetDatabaseRegionResult',
    'GetDatabaseRegionsRegionResult',
    'GetDatabasesDatabaseResult',
    'GetDatabasesDatabaseDataImportResult',
    'GetDatabasesDatabaseDataImportDataSourceResult',
    'GetDatabasesDatabaseRegionResult',
    'GetOauthApplicationsApplicationResult',
    'GetOrganizationFeaturesResult',
    'GetOrganizationFlagsResult',
    'GetOrganizationRegionsRegionResult',
    'GetOrganizationsOrganizationResult',
    'GetOrganizationsOrganizationFeaturesResult',
    'GetOrganizationsOrganizationFlagsResult',
    'GetPasswordActorResult',
    'GetPasswordDatabaseBranchResult',
    'GetPasswordRegionResult',
    'GetPasswordsPasswordResult',
    'GetPasswordsPasswordActorResult',
    'GetPasswordsPasswordDatabaseBranchResult',
    'GetPasswordsPasswordRegionResult',
    'GetUserDefaultOrganizationResult',
]

@pulumi.output_type
class BackupActor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupActor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupActor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupActor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avatar_url: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BackupBackupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionUnit":
            suggest = "retention_unit"
        elif key == "retentionValue":
            suggest = "retention_value"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "frequencyUnit":
            suggest = "frequency_unit"
        elif key == "frequencyValue":
            suggest = "frequency_value"
        elif key == "lastRanAt":
            suggest = "last_ran_at"
        elif key == "nextRunAt":
            suggest = "next_run_at"
        elif key == "scheduleDay":
            suggest = "schedule_day"
        elif key == "scheduleWeek":
            suggest = "schedule_week"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupBackupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupBackupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupBackupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retention_unit: str,
                 retention_value: float,
                 created_at: Optional[str] = None,
                 frequency_unit: Optional[str] = None,
                 frequency_value: Optional[float] = None,
                 id: Optional[str] = None,
                 last_ran_at: Optional[str] = None,
                 name: Optional[str] = None,
                 next_run_at: Optional[str] = None,
                 schedule_day: Optional[str] = None,
                 schedule_week: Optional[str] = None,
                 target: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str retention_unit: The unit for the retention period of the backup policy.
        :param float retention_value: A number value for the retention period of the backup policy.
        :param str created_at: When the backup policy was created.
        :param str frequency_unit: The unit for the frequency of the backup policy. Not configurable for now.
        :param float frequency_value: A number value for the frequency of the backup policy. Not configurable for now.
        :param str id: The ID of the backup policy.
        :param str last_ran_at: When the backup was last run.
        :param str name: The name of the backup policy.
        :param str next_run_at: When the backup will next run.
        :param str schedule_day: Day of the week that the backup is scheduled.
        :param str schedule_week: Week of the month that the backup is scheduled.
        :param str target: Whether the backup policy is for a production or development database, or for a database branch.
        :param str updated_at: When the backup policy was last updated.
        """
        pulumi.set(__self__, "retention_unit", retention_unit)
        pulumi.set(__self__, "retention_value", retention_value)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if frequency_unit is not None:
            pulumi.set(__self__, "frequency_unit", frequency_unit)
        if frequency_value is not None:
            pulumi.set(__self__, "frequency_value", frequency_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_ran_at is not None:
            pulumi.set(__self__, "last_ran_at", last_ran_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_run_at is not None:
            pulumi.set(__self__, "next_run_at", next_run_at)
        if schedule_day is not None:
            pulumi.set(__self__, "schedule_day", schedule_day)
        if schedule_week is not None:
            pulumi.set(__self__, "schedule_week", schedule_week)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="retentionUnit")
    def retention_unit(self) -> str:
        """
        The unit for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_unit")

    @property
    @pulumi.getter(name="retentionValue")
    def retention_value(self) -> float:
        """
        A number value for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_value")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        When the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="frequencyUnit")
    def frequency_unit(self) -> Optional[str]:
        """
        The unit for the frequency of the backup policy. Not configurable for now.
        """
        return pulumi.get(self, "frequency_unit")

    @property
    @pulumi.getter(name="frequencyValue")
    def frequency_value(self) -> Optional[float]:
        """
        A number value for the frequency of the backup policy. Not configurable for now.
        """
        return pulumi.get(self, "frequency_value")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the backup policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRanAt")
    def last_ran_at(self) -> Optional[str]:
        """
        When the backup was last run.
        """
        return pulumi.get(self, "last_ran_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the backup policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> Optional[str]:
        """
        When the backup will next run.
        """
        return pulumi.get(self, "next_run_at")

    @property
    @pulumi.getter(name="scheduleDay")
    def schedule_day(self) -> Optional[str]:
        """
        Day of the week that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_day")

    @property
    @pulumi.getter(name="scheduleWeek")
    def schedule_week(self) -> Optional[str]:
        """
        Week of the month that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_week")

    @property
    @pulumi.getter
    def target(self) -> Optional[str]:
        """
        Whether the backup policy is for a production or development database, or for a database branch.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        When the backup policy was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class BranchActor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BranchActor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BranchActor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BranchActor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avatar_url: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BranchRegion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "publicIpAddresses":
            suggest = "public_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BranchRegion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BranchRegion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BranchRegion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 location: Optional[str] = None,
                 provider: Optional[str] = None,
                 public_ip_addresses: Optional[Sequence[str]] = None,
                 slug: Optional[str] = None):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if public_ip_addresses is not None:
            pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[Sequence[str]]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class BranchRestoredFromBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "deletedAt":
            suggest = "deleted_at"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BranchRestoredFromBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BranchRestoredFromBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BranchRestoredFromBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 deleted_at: Optional[str] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str created_at: When the resource was created.
        :param str deleted_at: When the resource was deleted, if deleted.
        :param str id: The ID for the resource.
        :param str name: The name for the resource.
        :param str updated_at: When the resource was last updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        When the resource was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[str]:
        """
        When the resource was deleted, if deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        When the resource was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DatabaseDataImport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"
        elif key == "finishedAt":
            suggest = "finished_at"
        elif key == "importCheckErrors":
            suggest = "import_check_errors"
        elif key == "startedAt":
            suggest = "started_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatabaseDataImport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatabaseDataImport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatabaseDataImport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: Optional['outputs.DatabaseDataImportDataSource'] = None,
                 finished_at: Optional[str] = None,
                 import_check_errors: Optional[str] = None,
                 started_at: Optional[str] = None,
                 state: Optional[str] = None):
        """
        :param 'DatabaseDataImportDataSourceArgs' data_source: Connection information for the source of the data for the import.
        :param str finished_at: When the import finished.
        :param str import_check_errors: Errors encountered while preparing the import.
        :param str started_at: When the import started.
        :param str state: The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if import_check_errors is not None:
            pulumi.set(__self__, "import_check_errors", import_check_errors)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional['outputs.DatabaseDataImportDataSource']:
        """
        Connection information for the source of the data for the import.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[str]:
        """
        When the import finished.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter(name="importCheckErrors")
    def import_check_errors(self) -> Optional[str]:
        """
        Errors encountered while preparing the import.
        """
        return pulumi.get(self, "import_check_errors")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[str]:
        """
        When the import started.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class DatabaseDataImportDataSource(dict):
    def __init__(__self__, *,
                 database: str,
                 hostname: str,
                 port: str):
        """
        :param str database: The name of the database imported from.
        :param str hostname: The hostname where the database lives.
        :param str port: The port on which the database listens on the host.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of the database imported from.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname where the database lives.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port on which the database listens on the host.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class PasswordActor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "avatarUrl":
            suggest = "avatar_url"
        elif key == "displayName":
            suggest = "display_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PasswordActor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PasswordActor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PasswordActor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 avatar_url: Optional[str] = None,
                 display_name: Optional[str] = None,
                 id: Optional[str] = None):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[str]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class PasswordDatabaseBranch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessHostUrl":
            suggest = "access_host_url"
        elif key == "mysqlEdgeAddress":
            suggest = "mysql_edge_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PasswordDatabaseBranch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PasswordDatabaseBranch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PasswordDatabaseBranch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_host_url: Optional[str] = None,
                 id: Optional[str] = None,
                 mysql_edge_address: Optional[str] = None,
                 name: Optional[str] = None,
                 production: Optional[bool] = None):
        if access_host_url is not None:
            pulumi.set(__self__, "access_host_url", access_host_url)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mysql_edge_address is not None:
            pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if production is not None:
            pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> Optional[str]:
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> Optional[str]:
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def production(self) -> Optional[bool]:
        return pulumi.get(self, "production")


@pulumi.output_type
class PasswordRegion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "publicIpAddresses":
            suggest = "public_ip_addresses"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PasswordRegion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PasswordRegion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PasswordRegion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 enabled: Optional[bool] = None,
                 id: Optional[str] = None,
                 location: Optional[str] = None,
                 provider: Optional[str] = None,
                 public_ip_addresses: Optional[Sequence[str]] = None,
                 slug: Optional[str] = None):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if public_ip_addresses is not None:
            pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> Optional[str]:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[Sequence[str]]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetBackupActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBackupBackupPolicyResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 frequency_unit: str,
                 frequency_value: float,
                 id: str,
                 last_ran_at: str,
                 name: str,
                 next_run_at: str,
                 retention_unit: str,
                 retention_value: float,
                 schedule_day: str,
                 schedule_week: str,
                 target: str,
                 updated_at: str):
        """
        :param str created_at: When the backup policy was created.
        :param str frequency_unit: The unit for the frequency of the backup policy.
        :param float frequency_value: A number value for the frequency of the backup policy.
        :param str id: The ID of the backup policy.
        :param str last_ran_at: When the backup was last run.
        :param str name: The name of the backup policy.
        :param str next_run_at: When the backup will next run.
        :param str retention_unit: The unit for the retention period of the backup policy.
        :param float retention_value: A number value for the retention period of the backup policy.
        :param str schedule_day: Day of the week that the backup is scheduled.
        :param str schedule_week: Week of the month that the backup is scheduled.
        :param str target: Whether the backup policy is for a production or development database, or for a database branch.
        :param str updated_at: When the backup policy was last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency_unit", frequency_unit)
        pulumi.set(__self__, "frequency_value", frequency_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_ran_at", last_ran_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_run_at", next_run_at)
        pulumi.set(__self__, "retention_unit", retention_unit)
        pulumi.set(__self__, "retention_value", retention_value)
        pulumi.set(__self__, "schedule_day", schedule_day)
        pulumi.set(__self__, "schedule_week", schedule_week)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="frequencyUnit")
    def frequency_unit(self) -> str:
        """
        The unit for the frequency of the backup policy.
        """
        return pulumi.get(self, "frequency_unit")

    @property
    @pulumi.getter(name="frequencyValue")
    def frequency_value(self) -> float:
        """
        A number value for the frequency of the backup policy.
        """
        return pulumi.get(self, "frequency_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the backup policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRanAt")
    def last_ran_at(self) -> str:
        """
        When the backup was last run.
        """
        return pulumi.get(self, "last_ran_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the backup policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> str:
        """
        When the backup will next run.
        """
        return pulumi.get(self, "next_run_at")

    @property
    @pulumi.getter(name="retentionUnit")
    def retention_unit(self) -> str:
        """
        The unit for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_unit")

    @property
    @pulumi.getter(name="retentionValue")
    def retention_value(self) -> float:
        """
        A number value for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_value")

    @property
    @pulumi.getter(name="scheduleDay")
    def schedule_day(self) -> str:
        """
        Day of the week that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_day")

    @property
    @pulumi.getter(name="scheduleWeek")
    def schedule_week(self) -> str:
        """
        Week of the month that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_week")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Whether the backup policy is for a production or development database, or for a database branch.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the backup policy was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBackupsBackupResult(dict):
    def __init__(__self__, *,
                 actor: 'outputs.GetBackupsBackupActorResult',
                 backup_policy: 'outputs.GetBackupsBackupBackupPolicyResult',
                 branch: str,
                 created_at: str,
                 database: str,
                 estimated_storage_cost: float,
                 id: str,
                 name: str,
                 organization: str,
                 required: bool,
                 restored_branches: Sequence[str],
                 size: float,
                 state: str,
                 updated_at: str):
        """
        :param 'GetBackupsBackupActorArgs' actor: The actor that created the backup.
        :param 'GetBackupsBackupBackupPolicyArgs' backup_policy: The backup policy being followed.
        :param str branch: The branch this backup belongs to.
        :param str created_at: When the backup was created.
        :param str database: The database this backup belongs to.
        :param float estimated_storage_cost: The estimated storage cost of the backup.
        :param str id: The ID of the backup.
        :param str name: The name of the backup.
        :param str organization: The organization this backup belongs to.
        :param bool required: Whether or not the backup policy is required.
        :param Sequence[str] restored_branches: Branches that have been restored with this backup.
        :param float size: The size of the backup.
        :param str state: The current state of the backup.
        :param str updated_at: When the backup was last updated.
        """
        pulumi.set(__self__, "actor", actor)
        pulumi.set(__self__, "backup_policy", backup_policy)
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "estimated_storage_cost", estimated_storage_cost)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "restored_branches", restored_branches)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetBackupsBackupActorResult':
        """
        The actor that created the backup.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="backupPolicy")
    def backup_policy(self) -> 'outputs.GetBackupsBackupBackupPolicyResult':
        """
        The backup policy being followed.
        """
        return pulumi.get(self, "backup_policy")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        The branch this backup belongs to.
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the backup was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this backup belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="estimatedStorageCost")
    def estimated_storage_cost(self) -> float:
        """
        The estimated storage cost of the backup.
        """
        return pulumi.get(self, "estimated_storage_cost")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the backup.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the backup.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this backup belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def required(self) -> bool:
        """
        Whether or not the backup policy is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="restoredBranches")
    def restored_branches(self) -> Sequence[str]:
        """
        Branches that have been restored with this backup.
        """
        return pulumi.get(self, "restored_branches")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        The size of the backup.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the backup.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the backup was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBackupsBackupActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBackupsBackupBackupPolicyResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 frequency_unit: str,
                 frequency_value: float,
                 id: str,
                 last_ran_at: str,
                 name: str,
                 next_run_at: str,
                 retention_unit: str,
                 retention_value: float,
                 schedule_day: str,
                 schedule_week: str,
                 target: str,
                 updated_at: str):
        """
        :param str created_at: When the backup policy was created.
        :param str frequency_unit: The unit for the frequency of the backup policy.
        :param float frequency_value: A number value for the frequency of the backup policy.
        :param str id: The ID of the backup policy.
        :param str last_ran_at: When the backup was last run.
        :param str name: The name of the backup policy.
        :param str next_run_at: When the backup will next run.
        :param str retention_unit: The unit for the retention period of the backup policy.
        :param float retention_value: A number value for the retention period of the backup policy.
        :param str schedule_day: Day of the week that the backup is scheduled.
        :param str schedule_week: Week of the month that the backup is scheduled.
        :param str target: Whether the backup policy is for a production or development database, or for a database branch.
        :param str updated_at: When the backup policy was last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "frequency_unit", frequency_unit)
        pulumi.set(__self__, "frequency_value", frequency_value)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_ran_at", last_ran_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_run_at", next_run_at)
        pulumi.set(__self__, "retention_unit", retention_unit)
        pulumi.set(__self__, "retention_value", retention_value)
        pulumi.set(__self__, "schedule_day", schedule_day)
        pulumi.set(__self__, "schedule_week", schedule_week)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="frequencyUnit")
    def frequency_unit(self) -> str:
        """
        The unit for the frequency of the backup policy.
        """
        return pulumi.get(self, "frequency_unit")

    @property
    @pulumi.getter(name="frequencyValue")
    def frequency_value(self) -> float:
        """
        A number value for the frequency of the backup policy.
        """
        return pulumi.get(self, "frequency_value")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the backup policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastRanAt")
    def last_ran_at(self) -> str:
        """
        When the backup was last run.
        """
        return pulumi.get(self, "last_ran_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the backup policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> str:
        """
        When the backup will next run.
        """
        return pulumi.get(self, "next_run_at")

    @property
    @pulumi.getter(name="retentionUnit")
    def retention_unit(self) -> str:
        """
        The unit for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_unit")

    @property
    @pulumi.getter(name="retentionValue")
    def retention_value(self) -> float:
        """
        A number value for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_value")

    @property
    @pulumi.getter(name="scheduleDay")
    def schedule_day(self) -> str:
        """
        Day of the week that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_day")

    @property
    @pulumi.getter(name="scheduleWeek")
    def schedule_week(self) -> str:
        """
        Week of the month that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_week")

    @property
    @pulumi.getter
    def target(self) -> str:
        """
        Whether the backup policy is for a production or development database, or for a database branch.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the backup policy was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBranchActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBranchRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetBranchRestoredFromBranchResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 deleted_at: str,
                 id: str,
                 name: str,
                 updated_at: str):
        """
        :param str created_at: When the resource was created.
        :param str deleted_at: When the resource was deleted, if deleted.
        :param str id: The ID for the resource.
        :param str name: The name for the resource.
        :param str updated_at: When the resource was last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the resource was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        """
        When the resource was deleted, if deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the resource was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBranchSchemaLintErrorResult(dict):
    def __init__(__self__, *,
                 auto_increment_column_names: Sequence[str],
                 charset_name: str,
                 check_constraint_name: str,
                 column_name: str,
                 docs_url: str,
                 engine_name: str,
                 enum_value: str,
                 error_description: str,
                 foreign_key_column_names: Sequence[str],
                 json_path: str,
                 keyspace_name: str,
                 lint_error: str,
                 partition_name: str,
                 partitioning_type: str,
                 subject_type: str,
                 table_name: str,
                 vindex_name: str):
        """
        :param Sequence[str] auto_increment_column_names: A list of invalid auto-incremented columns.
        :param str charset_name: The charset of the schema.
        :param str check_constraint_name: The name of the invalid check constraint.
        :param str column_name: The column in a table relevant to the error.
        :param str docs_url: A link to the documentation related to the error.
        :param str engine_name: The engine of the schema.
        :param str enum_value: The name of the invalid enum value.
        :param str error_description: A description for the error that occurred.
        :param Sequence[str] foreign_key_column_names: A list of invalid foreign key columns in a table.
        :param str json_path: The path for an invalid JSON column.
        :param str keyspace_name: The keyspace of the schema with the error.
        :param str lint_error: Code representing.
        :param str partition_name: The name of the invalid partition in the schema.
        :param str partitioning_type: The name of the invalid partitioning type.
        :param str subject_type: The subject for the errors.
        :param str table_name: The table with the error.
        :param str vindex_name: The name of the vindex for the schema.
        """
        pulumi.set(__self__, "auto_increment_column_names", auto_increment_column_names)
        pulumi.set(__self__, "charset_name", charset_name)
        pulumi.set(__self__, "check_constraint_name", check_constraint_name)
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "docs_url", docs_url)
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "enum_value", enum_value)
        pulumi.set(__self__, "error_description", error_description)
        pulumi.set(__self__, "foreign_key_column_names", foreign_key_column_names)
        pulumi.set(__self__, "json_path", json_path)
        pulumi.set(__self__, "keyspace_name", keyspace_name)
        pulumi.set(__self__, "lint_error", lint_error)
        pulumi.set(__self__, "partition_name", partition_name)
        pulumi.set(__self__, "partitioning_type", partitioning_type)
        pulumi.set(__self__, "subject_type", subject_type)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "vindex_name", vindex_name)

    @property
    @pulumi.getter(name="autoIncrementColumnNames")
    def auto_increment_column_names(self) -> Sequence[str]:
        """
        A list of invalid auto-incremented columns.
        """
        return pulumi.get(self, "auto_increment_column_names")

    @property
    @pulumi.getter(name="charsetName")
    def charset_name(self) -> str:
        """
        The charset of the schema.
        """
        return pulumi.get(self, "charset_name")

    @property
    @pulumi.getter(name="checkConstraintName")
    def check_constraint_name(self) -> str:
        """
        The name of the invalid check constraint.
        """
        return pulumi.get(self, "check_constraint_name")

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        The column in a table relevant to the error.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="docsUrl")
    def docs_url(self) -> str:
        """
        A link to the documentation related to the error.
        """
        return pulumi.get(self, "docs_url")

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> str:
        """
        The engine of the schema.
        """
        return pulumi.get(self, "engine_name")

    @property
    @pulumi.getter(name="enumValue")
    def enum_value(self) -> str:
        """
        The name of the invalid enum value.
        """
        return pulumi.get(self, "enum_value")

    @property
    @pulumi.getter(name="errorDescription")
    def error_description(self) -> str:
        """
        A description for the error that occurred.
        """
        return pulumi.get(self, "error_description")

    @property
    @pulumi.getter(name="foreignKeyColumnNames")
    def foreign_key_column_names(self) -> Sequence[str]:
        """
        A list of invalid foreign key columns in a table.
        """
        return pulumi.get(self, "foreign_key_column_names")

    @property
    @pulumi.getter(name="jsonPath")
    def json_path(self) -> str:
        """
        The path for an invalid JSON column.
        """
        return pulumi.get(self, "json_path")

    @property
    @pulumi.getter(name="keyspaceName")
    def keyspace_name(self) -> str:
        """
        The keyspace of the schema with the error.
        """
        return pulumi.get(self, "keyspace_name")

    @property
    @pulumi.getter(name="lintError")
    def lint_error(self) -> str:
        """
        Code representing.
        """
        return pulumi.get(self, "lint_error")

    @property
    @pulumi.getter(name="partitionName")
    def partition_name(self) -> str:
        """
        The name of the invalid partition in the schema.
        """
        return pulumi.get(self, "partition_name")

    @property
    @pulumi.getter(name="partitioningType")
    def partitioning_type(self) -> str:
        """
        The name of the invalid partitioning type.
        """
        return pulumi.get(self, "partitioning_type")

    @property
    @pulumi.getter(name="subjectType")
    def subject_type(self) -> str:
        """
        The subject for the errors.
        """
        return pulumi.get(self, "subject_type")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The table with the error.
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="vindexName")
    def vindex_name(self) -> str:
        """
        The name of the vindex for the schema.
        """
        return pulumi.get(self, "vindex_name")


@pulumi.output_type
class GetBranchSchemaTableResult(dict):
    def __init__(__self__, *,
                 html: str,
                 name: str,
                 raw: str):
        """
        :param str html: Syntax highlighted HTML for the table's schema.
        :param str name: Name of the table.
        :param str raw: The table's schema.
        """
        pulumi.set(__self__, "html", html)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def html(self) -> str:
        """
        Syntax highlighted HTML for the table's schema.
        """
        return pulumi.get(self, "html")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the table.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def raw(self) -> str:
        """
        The table's schema.
        """
        return pulumi.get(self, "raw")


@pulumi.output_type
class GetBranchesBranchResult(dict):
    def __init__(__self__, *,
                 access_host_url: str,
                 actor: 'outputs.GetBranchesBranchActorResult',
                 cluster_rate_name: str,
                 created_at: str,
                 database: str,
                 html_url: str,
                 id: str,
                 initial_restore_id: str,
                 mysql_address: str,
                 mysql_edge_address: str,
                 name: str,
                 organization: str,
                 parent_branch: str,
                 production: bool,
                 ready: bool,
                 region: 'outputs.GetBranchesBranchRegionResult',
                 restore_checklist_completed_at: str,
                 restored_from_branch: 'outputs.GetBranchesBranchRestoredFromBranchResult',
                 schema_last_updated_at: str,
                 shard_count: float,
                 sharded: bool,
                 updated_at: str):
        """
        :param str access_host_url: The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.
        :param 'GetBranchesBranchActorArgs' actor: The actor who created this branch.
        :param str cluster_rate_name: The SKU representing the branch's cluster size.
        :param str created_at: When the branch was created.
        :param str database: The database this branch belongs to.
        :param str html_url: Planetscale app URL for the branch.
        :param str id: The ID of the branch.
        :param str initial_restore_id: The ID of the backup from which the branch was restored.
        :param str mysql_address: The MySQL address for the branch.
        :param str mysql_edge_address: The address of the MySQL provider for the branch.
        :param str name: The name of the branch.
        :param str organization: The organization this branch belongs to.
        :param str parent_branch: The name of the parent branch from which the branch was created.
        :param bool production: Whether or not the branch is a production branch.
        :param bool ready: Whether or not the branch is ready to serve queries.
        :param 'GetBranchesBranchRegionArgs' region: The region in which this branch lives.
        :param str restore_checklist_completed_at: When a user last marked a backup restore checklist as completed.
        :param str schema_last_updated_at: When the schema for the branch was last updated.
        :param float shard_count: The number of shards in the branch.
        :param bool sharded: Whether or not the branch is sharded.
        :param str updated_at: When the branch was last updated.
        """
        pulumi.set(__self__, "access_host_url", access_host_url)
        pulumi.set(__self__, "actor", actor)
        pulumi.set(__self__, "cluster_rate_name", cluster_rate_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "html_url", html_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "initial_restore_id", initial_restore_id)
        pulumi.set(__self__, "mysql_address", mysql_address)
        pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "parent_branch", parent_branch)
        pulumi.set(__self__, "production", production)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "restore_checklist_completed_at", restore_checklist_completed_at)
        pulumi.set(__self__, "restored_from_branch", restored_from_branch)
        pulumi.set(__self__, "schema_last_updated_at", schema_last_updated_at)
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "sharded", sharded)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        """
        The access host URL for the branch. This is a legacy field, use `mysql_edge_address`.
        """
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetBranchesBranchActorResult':
        """
        The actor who created this branch.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="clusterRateName")
    def cluster_rate_name(self) -> str:
        """
        The SKU representing the branch's cluster size.
        """
        return pulumi.get(self, "cluster_rate_name")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the branch was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this branch belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> str:
        """
        Planetscale app URL for the branch.
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the branch.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="initialRestoreId")
    def initial_restore_id(self) -> str:
        """
        The ID of the backup from which the branch was restored.
        """
        return pulumi.get(self, "initial_restore_id")

    @property
    @pulumi.getter(name="mysqlAddress")
    def mysql_address(self) -> str:
        """
        The MySQL address for the branch.
        """
        return pulumi.get(self, "mysql_address")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> str:
        """
        The address of the MySQL provider for the branch.
        """
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the branch.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this branch belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="parentBranch")
    def parent_branch(self) -> str:
        """
        The name of the parent branch from which the branch was created.
        """
        return pulumi.get(self, "parent_branch")

    @property
    @pulumi.getter
    def production(self) -> bool:
        """
        Whether or not the branch is a production branch.
        """
        return pulumi.get(self, "production")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Whether or not the branch is ready to serve queries.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetBranchesBranchRegionResult':
        """
        The region in which this branch lives.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="restoreChecklistCompletedAt")
    def restore_checklist_completed_at(self) -> str:
        """
        When a user last marked a backup restore checklist as completed.
        """
        return pulumi.get(self, "restore_checklist_completed_at")

    @property
    @pulumi.getter(name="restoredFromBranch")
    def restored_from_branch(self) -> 'outputs.GetBranchesBranchRestoredFromBranchResult':
        return pulumi.get(self, "restored_from_branch")

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> str:
        """
        When the schema for the branch was last updated.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> float:
        """
        The number of shards in the branch.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter
    def sharded(self) -> bool:
        """
        Whether or not the branch is sharded.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the branch was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetBranchesBranchActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetBranchesBranchRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetBranchesBranchRestoredFromBranchResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 deleted_at: str,
                 id: str,
                 name: str,
                 updated_at: str):
        """
        :param str created_at: When the resource was created.
        :param str deleted_at: When the resource was deleted, if deleted.
        :param str id: The ID for the resource.
        :param str name: The name for the resource.
        :param str updated_at: When the resource was last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the resource was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        """
        When the resource was deleted, if deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name for the resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the resource was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDatabaseDataImportResult(dict):
    def __init__(__self__, *,
                 data_source: 'outputs.GetDatabaseDataImportDataSourceResult',
                 finished_at: str,
                 import_check_errors: str,
                 started_at: str,
                 state: str):
        """
        :param 'GetDatabaseDataImportDataSourceArgs' data_source: Connection information for the source of the data for the import.
        :param str finished_at: When the import finished.
        :param str import_check_errors: Errors encountered while preparing the import.
        :param str started_at: When the import started.
        :param str state: The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "import_check_errors", import_check_errors)
        pulumi.set(__self__, "started_at", started_at)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.GetDatabaseDataImportDataSourceResult':
        """
        Connection information for the source of the data for the import.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> str:
        """
        When the import finished.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter(name="importCheckErrors")
    def import_check_errors(self) -> str:
        """
        Errors encountered while preparing the import.
        """
        return pulumi.get(self, "import_check_errors")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        When the import started.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDatabaseDataImportDataSourceResult(dict):
    def __init__(__self__, *,
                 database: str,
                 hostname: str,
                 port: str):
        """
        :param str database: The name of the database imported from.
        :param str hostname: The hostname where the database lives.
        :param str port: The port on which the database listens on the host.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of the database imported from.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname where the database lives.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port on which the database listens on the host.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabaseReadOnlyRegionsRegionResult(dict):
    def __init__(__self__, *,
                 actor: 'outputs.GetDatabaseReadOnlyRegionsRegionActorResult',
                 created_at: str,
                 display_name: str,
                 id: str,
                 ready: bool,
                 ready_at: str,
                 region: 'outputs.GetDatabaseReadOnlyRegionsRegionRegionResult',
                 updated_at: str):
        """
        :param 'GetDatabaseReadOnlyRegionsRegionActorArgs' actor: The actor that created the read-only region.
        :param str created_at: When the read-only region was created.
        :param str display_name: The name of the read-only region.
        :param str id: The ID of the read-only region.
        :param bool ready: Whether or not the read-only region is ready to serve queries.
        :param str ready_at: When the read-only region was ready to serve queries.
        :param 'GetDatabaseReadOnlyRegionsRegionRegionArgs' region: The details of the read-only region.
        :param str updated_at: When the read-only region was last updated.
        """
        pulumi.set(__self__, "actor", actor)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "ready_at", ready_at)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetDatabaseReadOnlyRegionsRegionActorResult':
        """
        The actor that created the read-only region.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the read-only region was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the read-only region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the read-only region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Whether or not the read-only region is ready to serve queries.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="readyAt")
    def ready_at(self) -> str:
        """
        When the read-only region was ready to serve queries.
        """
        return pulumi.get(self, "ready_at")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetDatabaseReadOnlyRegionsRegionRegionResult':
        """
        The details of the read-only region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the read-only region was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetDatabaseReadOnlyRegionsRegionActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDatabaseReadOnlyRegionsRegionRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetDatabaseRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetDatabaseRegionsRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 allow_data_branching: bool,
                 at_backup_restore_branches_limit: bool,
                 at_development_branch_limit: bool,
                 automatic_migrations: bool,
                 branches_count: float,
                 branches_url: str,
                 created_at: str,
                 default_branch: str,
                 default_branch_read_only_regions_count: float,
                 default_branch_shard_count: float,
                 default_branch_table_count: float,
                 development_branches_count: float,
                 html_url: str,
                 id: str,
                 insights_raw_queries: bool,
                 issues_count: float,
                 migration_framework: str,
                 migration_table_name: str,
                 multiple_admins_required_for_deletion: bool,
                 name: str,
                 organization: str,
                 plan: str,
                 production_branch_web_console: bool,
                 production_branches_count: float,
                 ready: bool,
                 region: 'outputs.GetDatabasesDatabaseRegionResult',
                 require_approval_for_deploy: bool,
                 restrict_branch_region: bool,
                 schema_last_updated_at: str,
                 sharded: bool,
                 state: str,
                 updated_at: str,
                 url: str,
                 data_import: Optional['outputs.GetDatabasesDatabaseDataImportResult'] = None):
        """
        :param bool allow_data_branching: Whether seeding branches with data is enabled for all branches.
        :param bool at_backup_restore_branches_limit: If the database has reached its backup restored branch limit.
        :param bool at_development_branch_limit: If the database has reached its development branch limit.
        :param bool automatic_migrations: Whether to automatically manage Rails migrations during deploy requests.
        :param float branches_count: The total number of database branches.
        :param str branches_url: The URL to retrieve this database's branches via the API.
        :param str created_at: When the database was created.
        :param str default_branch: The default branch for the database.
        :param float default_branch_read_only_regions_count: Number of read only regions in the default branch.
        :param float default_branch_shard_count: Number of shards in the default branch.
        :param float default_branch_table_count: Number of tables in the default branch schema.
        :param float development_branches_count: The total number of database development branches.
        :param str html_url: The total number of database development branches.
        :param str id: The ID of the database.
        :param bool insights_raw_queries: The URL to see this database's branches in the web UI.
        :param float issues_count: The total number of ongoing issues within a database.
        :param str migration_framework: Framework used for applying migrations.
        :param str migration_table_name: Table name to use for copying schema migration data.
        :param bool multiple_admins_required_for_deletion: If the database requires multiple admins for deletion.
        :param str name: The name of this database.
        :param str organization: The organization this database belongs to.
        :param str plan: The database plan.
        :param bool production_branch_web_console: Whether web console is enabled for production branches.
        :param float production_branches_count: The total number of database production branches.
        :param bool ready: If the database is ready to be used.
        :param 'GetDatabasesDatabaseRegionArgs' region: The region the database lives in.
        :param bool require_approval_for_deploy: Whether an approval is required to deploy schema changes to this database.
        :param bool restrict_branch_region: Whether to restrict branch creation to one region.
        :param str schema_last_updated_at: When the default branch schema was last changed.
        :param bool sharded: If the database is sharded.
        :param str state: State of the database.
        :param str updated_at: When the database was last updated.
        :param str url: The URL to the database API endpoint.
        :param 'GetDatabasesDatabaseDataImportArgs' data_import: If the database was created from an import, describes the import process.
        """
        pulumi.set(__self__, "allow_data_branching", allow_data_branching)
        pulumi.set(__self__, "at_backup_restore_branches_limit", at_backup_restore_branches_limit)
        pulumi.set(__self__, "at_development_branch_limit", at_development_branch_limit)
        pulumi.set(__self__, "automatic_migrations", automatic_migrations)
        pulumi.set(__self__, "branches_count", branches_count)
        pulumi.set(__self__, "branches_url", branches_url)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_branch", default_branch)
        pulumi.set(__self__, "default_branch_read_only_regions_count", default_branch_read_only_regions_count)
        pulumi.set(__self__, "default_branch_shard_count", default_branch_shard_count)
        pulumi.set(__self__, "default_branch_table_count", default_branch_table_count)
        pulumi.set(__self__, "development_branches_count", development_branches_count)
        pulumi.set(__self__, "html_url", html_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "insights_raw_queries", insights_raw_queries)
        pulumi.set(__self__, "issues_count", issues_count)
        pulumi.set(__self__, "migration_framework", migration_framework)
        pulumi.set(__self__, "migration_table_name", migration_table_name)
        pulumi.set(__self__, "multiple_admins_required_for_deletion", multiple_admins_required_for_deletion)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "production_branch_web_console", production_branch_web_console)
        pulumi.set(__self__, "production_branches_count", production_branches_count)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "require_approval_for_deploy", require_approval_for_deploy)
        pulumi.set(__self__, "restrict_branch_region", restrict_branch_region)
        pulumi.set(__self__, "schema_last_updated_at", schema_last_updated_at)
        pulumi.set(__self__, "sharded", sharded)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url", url)
        if data_import is not None:
            pulumi.set(__self__, "data_import", data_import)

    @property
    @pulumi.getter(name="allowDataBranching")
    def allow_data_branching(self) -> bool:
        """
        Whether seeding branches with data is enabled for all branches.
        """
        return pulumi.get(self, "allow_data_branching")

    @property
    @pulumi.getter(name="atBackupRestoreBranchesLimit")
    def at_backup_restore_branches_limit(self) -> bool:
        """
        If the database has reached its backup restored branch limit.
        """
        return pulumi.get(self, "at_backup_restore_branches_limit")

    @property
    @pulumi.getter(name="atDevelopmentBranchLimit")
    def at_development_branch_limit(self) -> bool:
        """
        If the database has reached its development branch limit.
        """
        return pulumi.get(self, "at_development_branch_limit")

    @property
    @pulumi.getter(name="automaticMigrations")
    def automatic_migrations(self) -> bool:
        """
        Whether to automatically manage Rails migrations during deploy requests.
        """
        return pulumi.get(self, "automatic_migrations")

    @property
    @pulumi.getter(name="branchesCount")
    def branches_count(self) -> float:
        """
        The total number of database branches.
        """
        return pulumi.get(self, "branches_count")

    @property
    @pulumi.getter(name="branchesUrl")
    def branches_url(self) -> str:
        """
        The URL to retrieve this database's branches via the API.
        """
        return pulumi.get(self, "branches_url")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the database was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultBranch")
    def default_branch(self) -> str:
        """
        The default branch for the database.
        """
        return pulumi.get(self, "default_branch")

    @property
    @pulumi.getter(name="defaultBranchReadOnlyRegionsCount")
    def default_branch_read_only_regions_count(self) -> float:
        """
        Number of read only regions in the default branch.
        """
        return pulumi.get(self, "default_branch_read_only_regions_count")

    @property
    @pulumi.getter(name="defaultBranchShardCount")
    def default_branch_shard_count(self) -> float:
        """
        Number of shards in the default branch.
        """
        return pulumi.get(self, "default_branch_shard_count")

    @property
    @pulumi.getter(name="defaultBranchTableCount")
    def default_branch_table_count(self) -> float:
        """
        Number of tables in the default branch schema.
        """
        return pulumi.get(self, "default_branch_table_count")

    @property
    @pulumi.getter(name="developmentBranchesCount")
    def development_branches_count(self) -> float:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "development_branches_count")

    @property
    @pulumi.getter(name="htmlUrl")
    def html_url(self) -> str:
        """
        The total number of database development branches.
        """
        return pulumi.get(self, "html_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the database.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insightsRawQueries")
    def insights_raw_queries(self) -> bool:
        """
        The URL to see this database's branches in the web UI.
        """
        return pulumi.get(self, "insights_raw_queries")

    @property
    @pulumi.getter(name="issuesCount")
    def issues_count(self) -> float:
        """
        The total number of ongoing issues within a database.
        """
        return pulumi.get(self, "issues_count")

    @property
    @pulumi.getter(name="migrationFramework")
    def migration_framework(self) -> str:
        """
        Framework used for applying migrations.
        """
        return pulumi.get(self, "migration_framework")

    @property
    @pulumi.getter(name="migrationTableName")
    def migration_table_name(self) -> str:
        """
        Table name to use for copying schema migration data.
        """
        return pulumi.get(self, "migration_table_name")

    @property
    @pulumi.getter(name="multipleAdminsRequiredForDeletion")
    def multiple_admins_required_for_deletion(self) -> bool:
        """
        If the database requires multiple admins for deletion.
        """
        return pulumi.get(self, "multiple_admins_required_for_deletion")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of this database.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this database belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        The database plan.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="productionBranchWebConsole")
    def production_branch_web_console(self) -> bool:
        """
        Whether web console is enabled for production branches.
        """
        return pulumi.get(self, "production_branch_web_console")

    @property
    @pulumi.getter(name="productionBranchesCount")
    def production_branches_count(self) -> float:
        """
        The total number of database production branches.
        """
        return pulumi.get(self, "production_branches_count")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        If the database is ready to be used.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetDatabasesDatabaseRegionResult':
        """
        The region the database lives in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="requireApprovalForDeploy")
    def require_approval_for_deploy(self) -> bool:
        """
        Whether an approval is required to deploy schema changes to this database.
        """
        return pulumi.get(self, "require_approval_for_deploy")

    @property
    @pulumi.getter(name="restrictBranchRegion")
    def restrict_branch_region(self) -> bool:
        """
        Whether to restrict branch creation to one region.
        """
        return pulumi.get(self, "restrict_branch_region")

    @property
    @pulumi.getter(name="schemaLastUpdatedAt")
    def schema_last_updated_at(self) -> str:
        """
        When the default branch schema was last changed.
        """
        return pulumi.get(self, "schema_last_updated_at")

    @property
    @pulumi.getter
    def sharded(self) -> bool:
        """
        If the database is sharded.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the database.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the database was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        The URL to the database API endpoint.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="dataImport")
    def data_import(self) -> Optional['outputs.GetDatabasesDatabaseDataImportResult']:
        """
        If the database was created from an import, describes the import process.
        """
        return pulumi.get(self, "data_import")


@pulumi.output_type
class GetDatabasesDatabaseDataImportResult(dict):
    def __init__(__self__, *,
                 data_source: 'outputs.GetDatabasesDatabaseDataImportDataSourceResult',
                 finished_at: str,
                 import_check_errors: str,
                 started_at: str,
                 state: str):
        """
        :param 'GetDatabasesDatabaseDataImportDataSourceArgs' data_source: Connection information for the source of the data for the import.
        :param str finished_at: When the import finished.
        :param str import_check_errors: Errors encountered while preparing the import.
        :param str started_at: When the import started.
        :param str state: The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "import_check_errors", import_check_errors)
        pulumi.set(__self__, "started_at", started_at)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.GetDatabasesDatabaseDataImportDataSourceResult':
        """
        Connection information for the source of the data for the import.
        """
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> str:
        """
        When the import finished.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter(name="importCheckErrors")
    def import_check_errors(self) -> str:
        """
        Errors encountered while preparing the import.
        """
        return pulumi.get(self, "import_check_errors")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        When the import started.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDatabasesDatabaseDataImportDataSourceResult(dict):
    def __init__(__self__, *,
                 database: str,
                 hostname: str,
                 port: str):
        """
        :param str database: The name of the database imported from.
        :param str hostname: The hostname where the database lives.
        :param str port: The port on which the database listens on the host.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of the database imported from.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname where the database lives.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port on which the database listens on the host.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class GetDatabasesDatabaseRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetOauthApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 avatar: str,
                 client_id: str,
                 created_at: str,
                 domain: str,
                 id: str,
                 name: str,
                 redirect_uri: str,
                 scopes: Sequence[str],
                 tokens: float,
                 updated_at: str):
        """
        :param str avatar: The image source for the OAuth application's avatar.
        :param str client_id: The OAuth application's unique client id.
        :param str created_at: When the OAuth application was created.
        :param str domain: The domain of the OAuth application. Used for verification of a valid redirect uri.
        :param str id: The ID of the OAuth application.
        :param str name: The name of the OAuth application.
        :param str redirect_uri: The redirect URI of the OAuth application.
        :param Sequence[str] scopes: The scopes that the OAuth application requires on a user's accout.
        :param float tokens: The number of tokens issued by the OAuth application.
        :param str updated_at: When the OAuth application was last updated.
        """
        pulumi.set(__self__, "avatar", avatar)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        pulumi.set(__self__, "scopes", scopes)
        pulumi.set(__self__, "tokens", tokens)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def avatar(self) -> str:
        """
        The image source for the OAuth application's avatar.
        """
        return pulumi.get(self, "avatar")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The OAuth application's unique client id.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the OAuth application was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the OAuth application. Used for verification of a valid redirect uri.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the OAuth application.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the OAuth application.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> str:
        """
        The redirect URI of the OAuth application.
        """
        return pulumi.get(self, "redirect_uri")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence[str]:
        """
        The scopes that the OAuth application requires on a user's accout.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter
    def tokens(self) -> float:
        """
        The number of tokens issued by the OAuth application.
        """
        return pulumi.get(self, "tokens")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the OAuth application was last updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetOrganizationFeaturesResult(dict):
    def __init__(__self__, *,
                 insights: bool,
                 single_tenancy: bool,
                 sso: bool):
        pulumi.set(__self__, "insights", insights)
        pulumi.set(__self__, "single_tenancy", single_tenancy)
        pulumi.set(__self__, "sso", sso)

    @property
    @pulumi.getter
    def insights(self) -> bool:
        return pulumi.get(self, "insights")

    @property
    @pulumi.getter(name="singleTenancy")
    def single_tenancy(self) -> bool:
        return pulumi.get(self, "single_tenancy")

    @property
    @pulumi.getter
    def sso(self) -> bool:
        return pulumi.get(self, "sso")


@pulumi.output_type
class GetOrganizationFlagsResult(dict):
    def __init__(__self__, *,
                 example_flag: str):
        pulumi.set(__self__, "example_flag", example_flag)

    @property
    @pulumi.getter(name="exampleFlag")
    def example_flag(self) -> str:
        return pulumi.get(self, "example_flag")


@pulumi.output_type
class GetOrganizationRegionsRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetOrganizationsOrganizationResult(dict):
    def __init__(__self__, *,
                 billing_email: str,
                 created_at: str,
                 database_count: float,
                 features: 'outputs.GetOrganizationsOrganizationFeaturesResult',
                 flags: 'outputs.GetOrganizationsOrganizationFlagsResult',
                 has_past_due_invoices: bool,
                 id: str,
                 idp_managed_roles: bool,
                 name: str,
                 plan: str,
                 single_tenancy: bool,
                 sleeping_database_count: float,
                 sso: bool,
                 sso_directory: bool,
                 sso_portal_url: str,
                 updated_at: str,
                 valid_billing_info: bool):
        """
        :param str billing_email: The billing email of the organization.
        :param str created_at: When the organization was created.
        :param float database_count: The number of databases in the organization.
        :param 'GetOrganizationsOrganizationFeaturesArgs' features: Features that are enabled on the organization.
        :param 'GetOrganizationsOrganizationFlagsArgs' flags: .
        :param bool has_past_due_invoices: Whether or not the organization has past due billing invoices.
        :param str id: The ID for the organization.
        :param bool idp_managed_roles: Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
        :param str name: The name of the organization.
        :param str plan: The billing plan of the organization.
        :param bool single_tenancy: Whether or not the organization has single tenancy enabled.
        :param float sleeping_database_count: The number of sleeping databases in the organization.
        :param bool sso: Whether or not SSO is enabled on the organization.
        :param bool sso_directory: Whether or not the organization uses a WorkOS directory.
        :param str sso_portal_url: The URL of the organization's SSO portal.
        :param str updated_at: When the organization was last updated.
        :param bool valid_billing_info: Whether or not the organization's billing information is valid.
        """
        pulumi.set(__self__, "billing_email", billing_email)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database_count", database_count)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "has_past_due_invoices", has_past_due_invoices)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_managed_roles", idp_managed_roles)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        pulumi.set(__self__, "single_tenancy", single_tenancy)
        pulumi.set(__self__, "sleeping_database_count", sleeping_database_count)
        pulumi.set(__self__, "sso", sso)
        pulumi.set(__self__, "sso_directory", sso_directory)
        pulumi.set(__self__, "sso_portal_url", sso_portal_url)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "valid_billing_info", valid_billing_info)

    @property
    @pulumi.getter(name="billingEmail")
    def billing_email(self) -> str:
        """
        The billing email of the organization.
        """
        return pulumi.get(self, "billing_email")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the organization was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="databaseCount")
    def database_count(self) -> float:
        """
        The number of databases in the organization.
        """
        return pulumi.get(self, "database_count")

    @property
    @pulumi.getter
    def features(self) -> 'outputs.GetOrganizationsOrganizationFeaturesResult':
        """
        Features that are enabled on the organization.
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def flags(self) -> 'outputs.GetOrganizationsOrganizationFlagsResult':
        """
        .
        """
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter(name="hasPastDueInvoices")
    def has_past_due_invoices(self) -> bool:
        """
        Whether or not the organization has past due billing invoices.
        """
        return pulumi.get(self, "has_past_due_invoices")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the organization.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpManagedRoles")
    def idp_managed_roles(self) -> bool:
        """
        Whether or not the IdP provider is be responsible for managing roles in PlanetScale.
        """
        return pulumi.get(self, "idp_managed_roles")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plan(self) -> str:
        """
        The billing plan of the organization.
        """
        return pulumi.get(self, "plan")

    @property
    @pulumi.getter(name="singleTenancy")
    def single_tenancy(self) -> bool:
        """
        Whether or not the organization has single tenancy enabled.
        """
        return pulumi.get(self, "single_tenancy")

    @property
    @pulumi.getter(name="sleepingDatabaseCount")
    def sleeping_database_count(self) -> float:
        """
        The number of sleeping databases in the organization.
        """
        return pulumi.get(self, "sleeping_database_count")

    @property
    @pulumi.getter
    def sso(self) -> bool:
        """
        Whether or not SSO is enabled on the organization.
        """
        return pulumi.get(self, "sso")

    @property
    @pulumi.getter(name="ssoDirectory")
    def sso_directory(self) -> bool:
        """
        Whether or not the organization uses a WorkOS directory.
        """
        return pulumi.get(self, "sso_directory")

    @property
    @pulumi.getter(name="ssoPortalUrl")
    def sso_portal_url(self) -> str:
        """
        The URL of the organization's SSO portal.
        """
        return pulumi.get(self, "sso_portal_url")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the organization was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="validBillingInfo")
    def valid_billing_info(self) -> bool:
        """
        Whether or not the organization's billing information is valid.
        """
        return pulumi.get(self, "valid_billing_info")


@pulumi.output_type
class GetOrganizationsOrganizationFeaturesResult(dict):
    def __init__(__self__, *,
                 insights: bool,
                 single_tenancy: bool,
                 sso: bool):
        pulumi.set(__self__, "insights", insights)
        pulumi.set(__self__, "single_tenancy", single_tenancy)
        pulumi.set(__self__, "sso", sso)

    @property
    @pulumi.getter
    def insights(self) -> bool:
        return pulumi.get(self, "insights")

    @property
    @pulumi.getter(name="singleTenancy")
    def single_tenancy(self) -> bool:
        return pulumi.get(self, "single_tenancy")

    @property
    @pulumi.getter
    def sso(self) -> bool:
        return pulumi.get(self, "sso")


@pulumi.output_type
class GetOrganizationsOrganizationFlagsResult(dict):
    def __init__(__self__, *,
                 example_flag: str):
        pulumi.set(__self__, "example_flag", example_flag)

    @property
    @pulumi.getter(name="exampleFlag")
    def example_flag(self) -> str:
        return pulumi.get(self, "example_flag")


@pulumi.output_type
class GetPasswordActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPasswordDatabaseBranchResult(dict):
    def __init__(__self__, *,
                 access_host_url: str,
                 id: str,
                 mysql_edge_address: str,
                 name: str,
                 production: bool):
        pulumi.set(__self__, "access_host_url", access_host_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> str:
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def production(self) -> bool:
        return pulumi.get(self, "production")


@pulumi.output_type
class GetPasswordRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetPasswordsPasswordResult(dict):
    def __init__(__self__, *,
                 access_host_url: str,
                 actor: 'outputs.GetPasswordsPasswordActorResult',
                 branch: str,
                 created_at: str,
                 database: str,
                 database_branch: 'outputs.GetPasswordsPasswordDatabaseBranchResult',
                 deleted_at: str,
                 expires_at: str,
                 id: str,
                 name: str,
                 organization: str,
                 read_only_region_id: str,
                 region: 'outputs.GetPasswordsPasswordRegionResult',
                 renewable: bool,
                 role: str,
                 ttl_seconds: float,
                 username: str):
        """
        :param str access_host_url: The host URL for the password.
        :param 'GetPasswordsPasswordActorArgs' actor: The actor that created this branch.
        :param str branch: The branch this password belongs to..
        :param str created_at: When the password was created.
        :param str database: The database this branch password belongs to.
        :param 'GetPasswordsPasswordDatabaseBranchArgs' database_branch: The branch this password is allowed to access.
        :param str deleted_at: When the password was deleted.
        :param str expires_at: When the password will expire.
        :param str id: The ID for the password.
        :param str name: The display name for the password.
        :param str organization: The organization this database branch password belongs to.
        :param str read_only_region_id: If the password is for a read-only region, the ID of the region.
        :param 'GetPasswordsPasswordRegionArgs' region: The region in which this password can be used.
        :param bool renewable: Whether or not the password can be renewed.
        :param str role: The role for the password.
        :param float ttl_seconds: Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        :param str username: The username for the password.
        """
        pulumi.set(__self__, "access_host_url", access_host_url)
        pulumi.set(__self__, "actor", actor)
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "database_branch", database_branch)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "expires_at", expires_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "read_only_region_id", read_only_region_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "renewable", renewable)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "ttl_seconds", ttl_seconds)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        """
        The host URL for the password.
        """
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def actor(self) -> 'outputs.GetPasswordsPasswordActorResult':
        """
        The actor that created this branch.
        """
        return pulumi.get(self, "actor")

    @property
    @pulumi.getter
    def branch(self) -> str:
        """
        The branch this password belongs to..
        """
        return pulumi.get(self, "branch")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the password was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The database this branch password belongs to.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="databaseBranch")
    def database_branch(self) -> 'outputs.GetPasswordsPasswordDatabaseBranchResult':
        """
        The branch this password is allowed to access.
        """
        return pulumi.get(self, "database_branch")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        """
        When the password was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> str:
        """
        When the password will expire.
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID for the password.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name for the password.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def organization(self) -> str:
        """
        The organization this database branch password belongs to.
        """
        return pulumi.get(self, "organization")

    @property
    @pulumi.getter(name="readOnlyRegionId")
    def read_only_region_id(self) -> str:
        """
        If the password is for a read-only region, the ID of the region.
        """
        return pulumi.get(self, "read_only_region_id")

    @property
    @pulumi.getter
    def region(self) -> 'outputs.GetPasswordsPasswordRegionResult':
        """
        The region in which this password can be used.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def renewable(self) -> bool:
        """
        Whether or not the password can be renewed.
        """
        return pulumi.get(self, "renewable")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role for the password.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="ttlSeconds")
    def ttl_seconds(self) -> float:
        """
        Time to live (in seconds) for the password. The password will be invalid and unrenewable when TTL has passed.
        """
        return pulumi.get(self, "ttl_seconds")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        The username for the password.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetPasswordsPasswordActorResult(dict):
    def __init__(__self__, *,
                 avatar_url: str,
                 display_name: str,
                 id: str):
        """
        :param str avatar_url: The URL of the actor's avatar
        :param str display_name: The name of the actor
        :param str id: The ID of the actor
        """
        pulumi.set(__self__, "avatar_url", avatar_url)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> str:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetPasswordsPasswordDatabaseBranchResult(dict):
    def __init__(__self__, *,
                 access_host_url: str,
                 id: str,
                 mysql_edge_address: str,
                 name: str,
                 production: bool):
        pulumi.set(__self__, "access_host_url", access_host_url)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> str:
        return pulumi.get(self, "access_host_url")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> str:
        return pulumi.get(self, "mysql_edge_address")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def production(self) -> bool:
        return pulumi.get(self, "production")


@pulumi.output_type
class GetPasswordsPasswordRegionResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetUserDefaultOrganizationResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 deleted_at: str,
                 id: str,
                 name: str,
                 updated_at: str):
        """
        :param str created_at: When the organization was created.
        :param str deleted_at: When the organization was last deleted.
        :param str id: The ID of the organization.
        :param str name: The name of the organization.
        :param str updated_at: When the organization was last updated.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        When the organization was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> str:
        """
        When the organization was last deleted.
        """
        return pulumi.get(self, "deleted_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the organization.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        When the organization was last updated.
        """
        return pulumi.get(self, "updated_at")


