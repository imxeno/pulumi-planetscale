# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBranchesResult',
    'AwaitableGetBranchesResult',
    'get_branches',
    'get_branches_output',
]

@pulumi.output_type
class GetBranchesResult:
    """
    A collection of values returned by getBranches.
    """
    def __init__(__self__, branches=None, database=None, id=None, organization=None):
        if branches and not isinstance(branches, list):
            raise TypeError("Expected argument 'branches' to be a list")
        pulumi.set(__self__, "branches", branches)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if organization and not isinstance(organization, str):
            raise TypeError("Expected argument 'organization' to be a str")
        pulumi.set(__self__, "organization", organization)

    @property
    @pulumi.getter
    def branches(self) -> Sequence['outputs.GetBranchesBranchResult']:
        return pulumi.get(self, "branches")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def organization(self) -> str:
        return pulumi.get(self, "organization")


class AwaitableGetBranchesResult(GetBranchesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBranchesResult(
            branches=self.branches,
            database=self.database,
            id=self.id,
            organization=self.organization)


def get_branches(database: Optional[str] = None,
                 organization: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBranchesResult:
    """
    A list of PlanetScale branches.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_branches(organization="example.com",
        database="example_db")
    pulumi.export("branches", example)
    ```
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['organization'] = organization
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('planetscale:index/getBranches:getBranches', __args__, opts=opts, typ=GetBranchesResult).value

    return AwaitableGetBranchesResult(
        branches=pulumi.get(__ret__, 'branches'),
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        organization=pulumi.get(__ret__, 'organization'))
def get_branches_output(database: Optional[pulumi.Input[str]] = None,
                        organization: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBranchesResult]:
    """
    A list of PlanetScale branches.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_planetscale as planetscale

    example = planetscale.get_branches(organization="example.com",
        database="example_db")
    pulumi.export("branches", example)
    ```
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['organization'] = organization
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('planetscale:index/getBranches:getBranches', __args__, opts=opts, typ=GetBranchesResult)
    return __ret__.apply(lambda __response__: GetBranchesResult(
        branches=pulumi.get(__response__, 'branches'),
        database=pulumi.get(__response__, 'database'),
        id=pulumi.get(__response__, 'id'),
        organization=pulumi.get(__response__, 'organization')))
