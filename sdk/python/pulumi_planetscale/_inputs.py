# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'BackupActorArgs',
    'BackupActorArgsDict',
    'BackupBackupPolicyArgs',
    'BackupBackupPolicyArgsDict',
    'BranchActorArgs',
    'BranchActorArgsDict',
    'BranchRegionArgs',
    'BranchRegionArgsDict',
    'BranchRestoredFromBranchArgs',
    'BranchRestoredFromBranchArgsDict',
    'DatabaseDataImportArgs',
    'DatabaseDataImportArgsDict',
    'DatabaseDataImportDataSourceArgs',
    'DatabaseDataImportDataSourceArgsDict',
    'PasswordActorArgs',
    'PasswordActorArgsDict',
    'PasswordDatabaseBranchArgs',
    'PasswordDatabaseBranchArgsDict',
    'PasswordRegionArgs',
    'PasswordRegionArgsDict',
    'GetDatabaseDataImportArgs',
    'GetDatabaseDataImportArgsDict',
    'GetDatabaseDataImportDataSourceArgs',
    'GetDatabaseDataImportDataSourceArgsDict',
    'GetDatabaseRegionArgs',
    'GetDatabaseRegionArgsDict',
]

MYPY = False

if not MYPY:
    class BackupActorArgsDict(TypedDict):
        avatar_url: NotRequired[pulumi.Input[str]]
        """
        The URL of the actor's avatar
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the actor
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the actor
        """
elif False:
    BackupActorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupActorArgs:
    def __init__(__self__, *,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] avatar_url: The URL of the actor's avatar
        :param pulumi.Input[str] display_name: The name of the actor
        :param pulumi.Input[str] id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class BackupBackupPolicyArgsDict(TypedDict):
        retention_unit: pulumi.Input[str]
        """
        The unit for the retention period of the backup policy.
        """
        retention_value: pulumi.Input[float]
        """
        A number value for the retention period of the backup policy.
        """
        created_at: NotRequired[pulumi.Input[str]]
        """
        When the backup policy was created.
        """
        frequency_unit: NotRequired[pulumi.Input[str]]
        """
        The unit for the frequency of the backup policy. Not configurable for now.
        """
        frequency_value: NotRequired[pulumi.Input[float]]
        """
        A number value for the frequency of the backup policy. Not configurable for now.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the backup policy.
        """
        last_ran_at: NotRequired[pulumi.Input[str]]
        """
        When the backup was last run.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the backup policy.
        """
        next_run_at: NotRequired[pulumi.Input[str]]
        """
        When the backup will next run.
        """
        schedule_day: NotRequired[pulumi.Input[str]]
        """
        Day of the week that the backup is scheduled.
        """
        schedule_week: NotRequired[pulumi.Input[str]]
        """
        Week of the month that the backup is scheduled.
        """
        target: NotRequired[pulumi.Input[str]]
        """
        Whether the backup policy is for a production or development database, or for a database branch.
        """
        updated_at: NotRequired[pulumi.Input[str]]
        """
        When the backup policy was last updated.
        """
elif False:
    BackupBackupPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BackupBackupPolicyArgs:
    def __init__(__self__, *,
                 retention_unit: pulumi.Input[str],
                 retention_value: pulumi.Input[float],
                 created_at: Optional[pulumi.Input[str]] = None,
                 frequency_unit: Optional[pulumi.Input[str]] = None,
                 frequency_value: Optional[pulumi.Input[float]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 last_ran_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 next_run_at: Optional[pulumi.Input[str]] = None,
                 schedule_day: Optional[pulumi.Input[str]] = None,
                 schedule_week: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] retention_unit: The unit for the retention period of the backup policy.
        :param pulumi.Input[float] retention_value: A number value for the retention period of the backup policy.
        :param pulumi.Input[str] created_at: When the backup policy was created.
        :param pulumi.Input[str] frequency_unit: The unit for the frequency of the backup policy. Not configurable for now.
        :param pulumi.Input[float] frequency_value: A number value for the frequency of the backup policy. Not configurable for now.
        :param pulumi.Input[str] id: The ID of the backup policy.
        :param pulumi.Input[str] last_ran_at: When the backup was last run.
        :param pulumi.Input[str] name: The name of the backup policy.
        :param pulumi.Input[str] next_run_at: When the backup will next run.
        :param pulumi.Input[str] schedule_day: Day of the week that the backup is scheduled.
        :param pulumi.Input[str] schedule_week: Week of the month that the backup is scheduled.
        :param pulumi.Input[str] target: Whether the backup policy is for a production or development database, or for a database branch.
        :param pulumi.Input[str] updated_at: When the backup policy was last updated.
        """
        pulumi.set(__self__, "retention_unit", retention_unit)
        pulumi.set(__self__, "retention_value", retention_value)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if frequency_unit is not None:
            pulumi.set(__self__, "frequency_unit", frequency_unit)
        if frequency_value is not None:
            pulumi.set(__self__, "frequency_value", frequency_value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_ran_at is not None:
            pulumi.set(__self__, "last_ran_at", last_ran_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if next_run_at is not None:
            pulumi.set(__self__, "next_run_at", next_run_at)
        if schedule_day is not None:
            pulumi.set(__self__, "schedule_day", schedule_day)
        if schedule_week is not None:
            pulumi.set(__self__, "schedule_week", schedule_week)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="retentionUnit")
    def retention_unit(self) -> pulumi.Input[str]:
        """
        The unit for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_unit")

    @retention_unit.setter
    def retention_unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "retention_unit", value)

    @property
    @pulumi.getter(name="retentionValue")
    def retention_value(self) -> pulumi.Input[float]:
        """
        A number value for the retention period of the backup policy.
        """
        return pulumi.get(self, "retention_value")

    @retention_value.setter
    def retention_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "retention_value", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the backup policy was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="frequencyUnit")
    def frequency_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit for the frequency of the backup policy. Not configurable for now.
        """
        return pulumi.get(self, "frequency_unit")

    @frequency_unit.setter
    def frequency_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency_unit", value)

    @property
    @pulumi.getter(name="frequencyValue")
    def frequency_value(self) -> Optional[pulumi.Input[float]]:
        """
        A number value for the frequency of the backup policy. Not configurable for now.
        """
        return pulumi.get(self, "frequency_value")

    @frequency_value.setter
    def frequency_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "frequency_value", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the backup policy.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastRanAt")
    def last_ran_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the backup was last run.
        """
        return pulumi.get(self, "last_ran_at")

    @last_ran_at.setter
    def last_ran_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_ran_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the backup policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nextRunAt")
    def next_run_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the backup will next run.
        """
        return pulumi.get(self, "next_run_at")

    @next_run_at.setter
    def next_run_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_run_at", value)

    @property
    @pulumi.getter(name="scheduleDay")
    def schedule_day(self) -> Optional[pulumi.Input[str]]:
        """
        Day of the week that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_day")

    @schedule_day.setter
    def schedule_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_day", value)

    @property
    @pulumi.getter(name="scheduleWeek")
    def schedule_week(self) -> Optional[pulumi.Input[str]]:
        """
        Week of the month that the backup is scheduled.
        """
        return pulumi.get(self, "schedule_week")

    @schedule_week.setter
    def schedule_week(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_week", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Whether the backup policy is for a production or development database, or for a database branch.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the backup policy was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class BranchActorArgsDict(TypedDict):
        avatar_url: NotRequired[pulumi.Input[str]]
        """
        The URL of the actor's avatar
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the actor
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the actor
        """
elif False:
    BranchActorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BranchActorArgs:
    def __init__(__self__, *,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] avatar_url: The URL of the actor's avatar
        :param pulumi.Input[str] display_name: The name of the actor
        :param pulumi.Input[str] id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class BranchRegionArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        Name of the region.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Whether or not the region is currently active.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the region.
        """
        location: NotRequired[pulumi.Input[str]]
        """
        Location of the region.
        """
        provider: NotRequired[pulumi.Input[str]]
        """
        Provider for the region (ex. AWS).
        """
        public_ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Public IP addresses for the region.
        """
        slug: NotRequired[pulumi.Input[str]]
        """
        The slug of the region.
        """
elif False:
    BranchRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BranchRegionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 public_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Name of the region.
        :param pulumi.Input[bool] enabled: Whether or not the region is currently active.
        :param pulumi.Input[str] id: The ID of the region.
        :param pulumi.Input[str] location: Location of the region.
        :param pulumi.Input[str] provider: Provider for the region (ex. AWS).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ip_addresses: Public IP addresses for the region.
        :param pulumi.Input[str] slug: The slug of the region.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if public_ip_addresses is not None:
            pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @public_ip_addresses.setter
    def public_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ip_addresses", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


if not MYPY:
    class BranchRestoredFromBranchArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[str]]
        """
        When the resource was created.
        """
        deleted_at: NotRequired[pulumi.Input[str]]
        """
        When the resource was deleted, if deleted.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID for the resource.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name for the resource.
        """
        updated_at: NotRequired[pulumi.Input[str]]
        """
        When the resource was last updated.
        """
elif False:
    BranchRestoredFromBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BranchRestoredFromBranchArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 deleted_at: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] created_at: When the resource was created.
        :param pulumi.Input[str] deleted_at: When the resource was deleted, if deleted.
        :param pulumi.Input[str] id: The ID for the resource.
        :param pulumi.Input[str] name: The name for the resource.
        :param pulumi.Input[str] updated_at: When the resource was last updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource was deleted, if deleted.
        """
        return pulumi.get(self, "deleted_at")

    @deleted_at.setter
    def deleted_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deleted_at", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID for the resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name for the resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the resource was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class DatabaseDataImportArgsDict(TypedDict):
        data_source: NotRequired[pulumi.Input['DatabaseDataImportDataSourceArgsDict']]
        """
        Connection information for the source of the data for the import.
        """
        finished_at: NotRequired[pulumi.Input[str]]
        """
        When the import finished.
        """
        import_check_errors: NotRequired[pulumi.Input[str]]
        """
        Errors encountered while preparing the import.
        """
        started_at: NotRequired[pulumi.Input[str]]
        """
        When the import started.
        """
        state: NotRequired[pulumi.Input[str]]
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
elif False:
    DatabaseDataImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseDataImportArgs:
    def __init__(__self__, *,
                 data_source: Optional[pulumi.Input['DatabaseDataImportDataSourceArgs']] = None,
                 finished_at: Optional[pulumi.Input[str]] = None,
                 import_check_errors: Optional[pulumi.Input[str]] = None,
                 started_at: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DatabaseDataImportDataSourceArgs'] data_source: Connection information for the source of the data for the import.
        :param pulumi.Input[str] finished_at: When the import finished.
        :param pulumi.Input[str] import_check_errors: Errors encountered while preparing the import.
        :param pulumi.Input[str] started_at: When the import started.
        :param pulumi.Input[str] state: The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)
        if finished_at is not None:
            pulumi.set(__self__, "finished_at", finished_at)
        if import_check_errors is not None:
            pulumi.set(__self__, "import_check_errors", import_check_errors)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input['DatabaseDataImportDataSourceArgs']]:
        """
        Connection information for the source of the data for the import.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input['DatabaseDataImportDataSourceArgs']]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the import finished.
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter(name="importCheckErrors")
    def import_check_errors(self) -> Optional[pulumi.Input[str]]:
        """
        Errors encountered while preparing the import.
        """
        return pulumi.get(self, "import_check_errors")

    @import_check_errors.setter
    def import_check_errors(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "import_check_errors", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the import started.
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


if not MYPY:
    class DatabaseDataImportDataSourceArgsDict(TypedDict):
        database: pulumi.Input[str]
        """
        The name of the database imported from.
        """
        hostname: pulumi.Input[str]
        """
        The hostname where the database lives.
        """
        port: pulumi.Input[str]
        """
        The port on which the database listens on the host.
        """
elif False:
    DatabaseDataImportDataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseDataImportDataSourceArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 hostname: pulumi.Input[str],
                 port: pulumi.Input[str]):
        """
        :param pulumi.Input[str] database: The name of the database imported from.
        :param pulumi.Input[str] hostname: The hostname where the database lives.
        :param pulumi.Input[str] port: The port on which the database listens on the host.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        The name of the database imported from.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Input[str]:
        """
        The hostname where the database lives.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[str]:
        """
        The port on which the database listens on the host.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[str]):
        pulumi.set(self, "port", value)


if not MYPY:
    class PasswordActorArgsDict(TypedDict):
        avatar_url: NotRequired[pulumi.Input[str]]
        """
        The URL of the actor's avatar
        """
        display_name: NotRequired[pulumi.Input[str]]
        """
        The name of the actor
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the actor
        """
elif False:
    PasswordActorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PasswordActorArgs:
    def __init__(__self__, *,
                 avatar_url: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] avatar_url: The URL of the actor's avatar
        :param pulumi.Input[str] display_name: The name of the actor
        :param pulumi.Input[str] id: The ID of the actor
        """
        if avatar_url is not None:
            pulumi.set(__self__, "avatar_url", avatar_url)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="avatarUrl")
    def avatar_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the actor's avatar
        """
        return pulumi.get(self, "avatar_url")

    @avatar_url.setter
    def avatar_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "avatar_url", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the actor
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the actor
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class PasswordDatabaseBranchArgsDict(TypedDict):
        access_host_url: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
        mysql_edge_address: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        production: NotRequired[pulumi.Input[bool]]
elif False:
    PasswordDatabaseBranchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PasswordDatabaseBranchArgs:
    def __init__(__self__, *,
                 access_host_url: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 mysql_edge_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 production: Optional[pulumi.Input[bool]] = None):
        if access_host_url is not None:
            pulumi.set(__self__, "access_host_url", access_host_url)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mysql_edge_address is not None:
            pulumi.set(__self__, "mysql_edge_address", mysql_edge_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if production is not None:
            pulumi.set(__self__, "production", production)

    @property
    @pulumi.getter(name="accessHostUrl")
    def access_host_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_host_url")

    @access_host_url.setter
    def access_host_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_host_url", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="mysqlEdgeAddress")
    def mysql_edge_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mysql_edge_address")

    @mysql_edge_address.setter
    def mysql_edge_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_edge_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def production(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "production")

    @production.setter
    def production(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "production", value)


if not MYPY:
    class PasswordRegionArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        Name of the region.
        """
        enabled: NotRequired[pulumi.Input[bool]]
        """
        Whether or not the region is currently active.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        The ID of the region.
        """
        location: NotRequired[pulumi.Input[str]]
        """
        Location of the region.
        """
        provider: NotRequired[pulumi.Input[str]]
        """
        Provider for the region (ex. AWS).
        """
        public_ip_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Public IP addresses for the region.
        """
        slug: NotRequired[pulumi.Input[str]]
        """
        The slug of the region.
        """
elif False:
    PasswordRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PasswordRegionArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 public_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Name of the region.
        :param pulumi.Input[bool] enabled: Whether or not the region is currently active.
        :param pulumi.Input[str] id: The ID of the region.
        :param pulumi.Input[str] location: Location of the region.
        :param pulumi.Input[str] provider: Provider for the region (ex. AWS).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] public_ip_addresses: Public IP addresses for the region.
        :param pulumi.Input[str] slug: The slug of the region.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if public_ip_addresses is not None:
            pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @public_ip_addresses.setter
    def public_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "public_ip_addresses", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


if not MYPY:
    class GetDatabaseDataImportArgsDict(TypedDict):
        data_source: 'GetDatabaseDataImportDataSourceArgsDict'
        """
        Connection information for the source of the data for the import.
        """
        finished_at: str
        """
        When the import finished.
        """
        import_check_errors: str
        """
        Errors encountered while preparing the import.
        """
        started_at: str
        """
        When the import started.
        """
        state: str
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
elif False:
    GetDatabaseDataImportArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabaseDataImportArgs:
    def __init__(__self__, *,
                 data_source: 'GetDatabaseDataImportDataSourceArgs',
                 finished_at: str,
                 import_check_errors: str,
                 started_at: str,
                 state: str):
        """
        :param 'GetDatabaseDataImportDataSourceArgs' data_source: Connection information for the source of the data for the import.
        :param str finished_at: When the import finished.
        :param str import_check_errors: Errors encountered while preparing the import.
        :param str started_at: When the import started.
        :param str state: The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "import_check_errors", import_check_errors)
        pulumi.set(__self__, "started_at", started_at)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'GetDatabaseDataImportDataSourceArgs':
        """
        Connection information for the source of the data for the import.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: 'GetDatabaseDataImportDataSourceArgs'):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> str:
        """
        When the import finished.
        """
        return pulumi.get(self, "finished_at")

    @finished_at.setter
    def finished_at(self, value: str):
        pulumi.set(self, "finished_at", value)

    @property
    @pulumi.getter(name="importCheckErrors")
    def import_check_errors(self) -> str:
        """
        Errors encountered while preparing the import.
        """
        return pulumi.get(self, "import_check_errors")

    @import_check_errors.setter
    def import_check_errors(self, value: str):
        pulumi.set(self, "import_check_errors", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        When the import started.
        """
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: str):
        pulumi.set(self, "started_at", value)

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the import, one of: pending, queued, in_progress, complete, cancelled, error.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: str):
        pulumi.set(self, "state", value)


if not MYPY:
    class GetDatabaseDataImportDataSourceArgsDict(TypedDict):
        database: str
        """
        The name of the database imported from.
        """
        hostname: str
        """
        The hostname where the database lives.
        """
        port: str
        """
        The port on which the database listens on the host.
        """
elif False:
    GetDatabaseDataImportDataSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabaseDataImportDataSourceArgs:
    def __init__(__self__, *,
                 database: str,
                 hostname: str,
                 port: str):
        """
        :param str database: The name of the database imported from.
        :param str hostname: The hostname where the database lives.
        :param str port: The port on which the database listens on the host.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of the database imported from.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: str):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def hostname(self) -> str:
        """
        The hostname where the database lives.
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: str):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        The port on which the database listens on the host.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: str):
        pulumi.set(self, "port", value)


if not MYPY:
    class GetDatabaseRegionArgsDict(TypedDict):
        display_name: str
        """
        Name of the region.
        """
        enabled: bool
        """
        Whether or not the region is currently active.
        """
        id: str
        """
        The ID of the region.
        """
        location: str
        """
        Location of the region.
        """
        provider: str
        """
        Provider for the region (ex. AWS).
        """
        public_ip_addresses: Sequence[str]
        """
        Public IP addresses for the region.
        """
        slug: str
        """
        The slug of the region.
        """
elif False:
    GetDatabaseRegionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetDatabaseRegionArgs:
    def __init__(__self__, *,
                 display_name: str,
                 enabled: bool,
                 id: str,
                 location: str,
                 provider: str,
                 public_ip_addresses: Sequence[str],
                 slug: str):
        """
        :param str display_name: Name of the region.
        :param bool enabled: Whether or not the region is currently active.
        :param str id: The ID of the region.
        :param str location: Location of the region.
        :param str provider: Provider for the region (ex. AWS).
        :param Sequence[str] public_ip_addresses: Public IP addresses for the region.
        :param str slug: The slug of the region.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Name of the region.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: str):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether or not the region is currently active.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the region.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Location of the region.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: str):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def provider(self) -> str:
        """
        Provider for the region (ex. AWS).
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: str):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        Public IP addresses for the region.
        """
        return pulumi.get(self, "public_ip_addresses")

    @public_ip_addresses.setter
    def public_ip_addresses(self, value: Sequence[str]):
        pulumi.set(self, "public_ip_addresses", value)

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        The slug of the region.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: str):
        pulumi.set(self, "slug", value)


