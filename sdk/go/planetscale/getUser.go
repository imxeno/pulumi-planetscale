// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package planetscale

import (
	"context"
	"reflect"

	"github.com/imxeno/pulumi-planetscale/sdk/go/planetscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A PlanetScale user.
//
// Known limitations:
// - Does not work when the provider is configured with a service token.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/imxeno/pulumi-planetscale/sdk/go/planetscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// doesn't work right now for some reason
//			example, err := planetscale.GetUser(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("currentUser", example)
//			return nil
//		})
//	}
//
// ```
func GetUser(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserResult
	err := ctx.Invoke("planetscale:index/getUser:getUser", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getUser.
type GetUserResult struct {
	// The URL source of the user's avatar.
	AvatarUrl string `pulumi:"avatarUrl"`
	// When the user was created.
	CreatedAt string `pulumi:"createdAt"`
	// The default organization for the user.
	DefaultOrganization GetUserDefaultOrganization `pulumi:"defaultOrganization"`
	// Whether or not the user is managed by a WorkOS directory.
	DirectoryManaged bool `pulumi:"directoryManaged"`
	// The display name of the user.
	DisplayName string `pulumi:"displayName"`
	// The email of the user.
	Email string `pulumi:"email"`
	// Whether or not the user is verified by email.
	EmailVerified bool `pulumi:"emailVerified"`
	// The ID of the user.
	Id string `pulumi:"id"`
	// Whether or not the user is managed by an authentication provider.
	Managed bool `pulumi:"managed"`
	// The name of the user.
	Name string `pulumi:"name"`
	// Whether or not the user is managed by WorkOS.
	Sso bool `pulumi:"sso"`
	// Whether or not the user has configured two factor authentication.
	TwoFactorAuthConfigured bool `pulumi:"twoFactorAuthConfigured"`
	// When the user was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func GetUserOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetUserResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetUserResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("planetscale:index/getUser:getUser", nil, GetUserResultOutput{}, options).(GetUserResultOutput), nil
	}).(GetUserResultOutput)
}

// A collection of values returned by getUser.
type GetUserResultOutput struct{ *pulumi.OutputState }

func (GetUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserResult)(nil)).Elem()
}

func (o GetUserResultOutput) ToGetUserResultOutput() GetUserResultOutput {
	return o
}

func (o GetUserResultOutput) ToGetUserResultOutputWithContext(ctx context.Context) GetUserResultOutput {
	return o
}

// The URL source of the user's avatar.
func (o GetUserResultOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

// When the user was created.
func (o GetUserResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The default organization for the user.
func (o GetUserResultOutput) DefaultOrganization() GetUserDefaultOrganizationOutput {
	return o.ApplyT(func(v GetUserResult) GetUserDefaultOrganization { return v.DefaultOrganization }).(GetUserDefaultOrganizationOutput)
}

// Whether or not the user is managed by a WorkOS directory.
func (o GetUserResultOutput) DirectoryManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.DirectoryManaged }).(pulumi.BoolOutput)
}

// The display name of the user.
func (o GetUserResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The email of the user.
func (o GetUserResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Email }).(pulumi.StringOutput)
}

// Whether or not the user is verified by email.
func (o GetUserResultOutput) EmailVerified() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.EmailVerified }).(pulumi.BoolOutput)
}

// The ID of the user.
func (o GetUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Whether or not the user is managed by an authentication provider.
func (o GetUserResultOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.Managed }).(pulumi.BoolOutput)
}

// The name of the user.
func (o GetUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// Whether or not the user is managed by WorkOS.
func (o GetUserResultOutput) Sso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.Sso }).(pulumi.BoolOutput)
}

// Whether or not the user has configured two factor authentication.
func (o GetUserResultOutput) TwoFactorAuthConfigured() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserResult) bool { return v.TwoFactorAuthConfigured }).(pulumi.BoolOutput)
}

// When the user was last updated.
func (o GetUserResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserResultOutput{})
}
